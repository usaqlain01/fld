<?php
/**
 * @file
 * Code for the Field Museum staff feature.
 */

include_once 'fmnh_staff.features.inc';

/**
 *
 */
function fmnh_staff_admin_paths() {
  return array(
    'profile-main/*/edit' => TRUE,
  );
}

function fmnh_staff_navbar_alter(&$items) {
  $items['user']['tray']['user_links']['#links']['main-profile'] = array(
    'title' => t('My public staff profile'),
    'href' => 'profile-main',
  );
}

/**
 * Implement hook_menu_alter()
 *
 * @param $items
 */
function fmnh_staff_menu_alter(&$items) {

  // This disables the delete function on produciton, which should probably never
  // be used even when it doesn't result in a total catastrophe.
  if (isset($_ENV['AH_SITE_ENVIRONMENT']) && $_ENV['AH_SITE_ENVIRONMENT'] == 'prod') {
    $items['import/%/delete-items']['access callback'] = FALSE;
  }

  $profile_type = profile2_get_types('main');
  $base_path = profile2_page_get_base_path($profile_type);
  foreach ($items as $path => &$item) {
    if (strpos($path, $base_path) === 0) {

      // Force title to use the auto entity label value which for
      // this is based on fields from the user account only.
      if ($item['title callback'] == 'profile2_page_title') {
        $item['title callback'] = 'fmnh_staff_profile2_page_title';
      }
    }
  }
}

/**
 * Menu title callback.
 */
function fmnh_staff_profile2_page_title($type_name, $profile2 = NULL) {
  $type = profile2_get_types($type_name);
  // If no profile is given, we are at the general path pointing to the own
  // profile.
  if (!isset($profile2)) {
    return t('My @profile-label', array('@profile-label' => drupal_strtolower($type->getTranslation('label'))));
  }

  if (!$profile2->pid) {
    $pattern = variable_get('auto_entitylabel_pattern_profile2_' . $type_name, '');
    if ($pattern) {
      $profile2->label = decode_entities(_auto_entitylabel_patternprocessor($pattern, $profile2, 'profile2'));
      return $profile2->label;
    }
  }
  return drupal_ucfirst($profile2->label());
}

/**
 * Implement hook_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function fmnh_staff_form_user_profile_form_alter(&$form, &$form_state) {
  if (!user_access('administer users')) {
    $form['field_givenname']['#access'] = user_access('administer users');
    $form['field_surname']['#access'] = user_access('administer users');
    $form['field_position']['#access'] = user_access('administer users');
    $form['field_business_unit']['#access'] = user_access('administer users');
    $form['field_home_department']['#access'] = user_access('administer users');
  }
}

/**
 * Replace missing profile images with the user's default.
 *
 * @param $variables
 * @param $hook
 */
function fmnh_staff_preprocess_entity(&$variables, $hook) {
  if ($variables['entity_type'] == 'profile2') {
    list($id, $vid, $bundle) = entity_extract_ids('profile2', $variables['profile2']);
    if ($bundle == 'main' && $variables['elements']['#view_mode'] == 'page') {
      $account = user_load($variables['profile2']->uid);
      $variables['content']['field_image'] = array(
        '#theme' => 'user_picture',
        '#account' => $account,
      );

      foreach (array('field_business_unit', 'field_home_department', 'field_position') as $field_name) {
        $items = field_get_items('user', $account, $field_name);
        if ($items) {
          foreach ($items as $item) {
            $variables['content'][$field_name][] = field_view_value('user', $account, $field_name, $item);
          }
        }
      }
    }
    $variables['url'] = url('about/staff/profile/'. $variables['profile2']->pid);
  }
}

/**
 * Implement hook_feeds_processor_targets_alter().
 *
 * @param $targets
 * @param $entity_type
 * @param $bundle_name
 */
function fmnh_staff_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($entity_type == 'user' && $bundle_name == 'user') {
    $targets['name']['callback'] = 'fmnh_staff_user_name_callback';
  }
}

/**
 * Generates user names for missing values.
 *
 * @param $source
 * @param $entity
 * @param $target
 * @param array $values
 * @param $mapping
 */
function fmnh_staff_user_name_callback($source, $entity, $target, array $values, $mapping) {
  if ($target == 'name') {
    $entity->name = drupal_strtolower(substr($values[0], 0, strpos($values[0], '@')));
  }
}

function fmnh_staff_filter($selected = '') {
  $options = array(
    '' => array(
      '' => '- all -',
    ),
    'Executive Staff' => array(
      'executive-staff' => 'Executive Staff',
    ),
    'Board of Trustees' => array(
      'board-of-trustees' => 'Board of Trustees',
    ),
    'Insitutional Advancement' => array(
      'institutional-advancement' => 'Institutional Advancement',
      'external-affairs' => 'External Affairs',
      'membership' => 'Membership',
    ),
    'Operations' => array(
      'protection-services' => 'Protection Services',
      'housekeeping' => 'Housekeeping',
      'finance' => 'Finance',
      'office-of-executive-vice-president' => 'Office of Executive Vice President',
      'print-shop' => 'Print Shop',
      'facilities' => 'Facilities',
    ),
    'President\'s Office' => array(
      'human-resources' => 'Human Resources',
      'information-technology' => 'Information Technology',
      'office-of-vp-and-general-counsel' => 'Office of VP and General Counsel',
      'office-of-president/ceo' => 'Office of President/CEO',
    ),
    'Public Programs and Education' => array(
      'exhibitions' => 'Exhibitions',
      'education' => 'Education',
      'theater' => 'Theater',
      'guest-relations' => 'Guest Relations',
      'public-relations' => 'Public Relations',
      'special-events-and-group-sales' => 'Special Events and Group Sales',
      'communications' => 'Communications',
      'public-programs-and-education' => 'Public Programs and Education',
    ),
    'Science and Education' => array(
      'science-and-education' => 'Science and Education',
      'action-center' => 'Action Center',
      'collections-center' => 'Collections Center',
      'integrative-research-center' => 'Integrative Research Center',
      'repatriation' => 'Repatriation',
    ),
  );

  $markup = <<<EOT
        <form class="form__filter">
          <!-- CAXY: The value for each of the options in this filter should be the full URL for the page that will display the people for just that department. We'll be updating the window location using the chosen option's value. -->
          <div class="form__field">

            <select id="select" class="js--selectMenu" data-placeholder="Filter Staff by Department">
EOT;
  foreach ($options as $optgroup) {
    foreach ($optgroup as $key => $value) {
      $attribute = '';
      if ($selected == $key) {
        $attribute = ' selected="selected"';
      }
      $markup .= '<option value="' . url('about/staff/'. $key, array('absolute' => TRUE)) . '"'.$attribute.'>' . check_plain($value) . '</option>';
    }
  }
  $markup .= <<<EOT
            </select>
          </div>
        </form>
EOT;
  return $markup;
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function fmnh_staff_ctools_plugin_directory($module, $plugin) {
  // Most of this module is implemented as an export ui plugin, and the
  // rest is in ctools/includes/ctools_access_ruleset.inc
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

function fmnh_staff_profile2_access($op, $profile = NULL, $account = NULL) {
  if (($op == 'view') && (isset($profile))) {
    $account2 = user_load($profile->uid);
    return $account2->status == 0 ? FALSE : TRUE;
  }
}

function fmnh_staff_preprocess_user_picture(&$variables, $hook) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    if (!empty($account->picture)) {
      // @TODO: Ideally this function would only be passed file objects, but
      // since there's a lot of legacy code that JOINs the {users} table to
      // {node} or {comments} and passes the results into this function if we
      // a numeric value in the picture field we'll assume it's a file id
      // and load it for them. Once we've got user_load_multiple() and
      // comment_load_multiple() functions the user module will be able to load
      // the picture files in mass during the object's load process.
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
    }
    elseif (variable_get('user_picture_default', '')) {
      $filepath = variable_get('user_picture_default', '');
    }
    if (isset($filepath)) {
      $profile = profile2_by_uid_load($account->uid, 'main');
      $path = "about/staff/profile/$profile->pid";
      $attributes = array();
      // Append active class.
      if ($path == $_GET['q']) {
        $attributes['class'] = array('bio__image');
      }

      $alt = t("@user's picture", array('@user' => format_username($account)));
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt, 'attributes' => $attributes));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt, 'attributes' => $attributes));
      }

      if (!empty($account->uid) && user_access('access user profiles') && $path != $_GET['q']) {
        $options = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        if (profile2_access('view', $profile) && !isset($profile->is_new)) {
          $item = menu_get_item();
          $variables['user_picture'] = l($variables['user_picture'], $path, $options);
        }
      }
    }
  }
}
