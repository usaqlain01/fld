diff --git addthis.admin.inc addthis.admin.inc
index 37df22e..adbf8ac 100644
--- addthis.admin.inc
+++ addthis.admin.inc
@@ -13,30 +13,12 @@
  *   The completed form definition.
  */
 function addthis_admin_settings() {
-  $form = array();
-
-  $form['addthis_general_settings'] = array(
-    '#type'  => 'fieldset',
-    '#title' => t('General settings'),
-  );
-  $form['addthis_general_settings']['addthis_username'] = array(
+  $form['addthis_username'] = array(
     '#type'          => 'textfield',
     '#title'         => t('Username'),
     '#default_value' => variable_get('addthis_username', 'my-username'),
     '#description'   => t('Your username for <a href="http://www.addthis.com/">addthis.com</a>. Example: my-username'),
   );
-  $form['addthis_general_settings']['addthis_display_in_links'] = array(
-    '#type'          => 'checkbox',
-    '#title'         => t('Display on node pages'),
-    '#default_value' => variable_get('addthis_display_in_links', '0'),
-    '#description'   => t('Display an AddThis button always on a node page\'s links section.'),
-  );
-  $form['addthis_general_settings']['addthis_display_in_teasers'] = array(
-    '#type'          => 'checkbox',
-    '#title'         => t('Display in node teasers'),
-    '#default_value' => variable_get('addthis_display_in_teasers', '0'),
-    '#description'   => t('Display an AddThis button in the node teasers.'),
-  );
 
   $form['addthis_button_settings'] = array(
     '#type'         => 'fieldset',
@@ -56,24 +38,6 @@ function addthis_admin_settings() {
     '#default_value' => variable_get('addthis_image_secure', 'https://secure.addthis.com/button1-share.gif'),
     '#description'   => t('This is only required if your site uses secure https connections. Example: https://secure.addthis.com/button1-share.gif'),
   );
-  $form['addthis_button_settings']['addthis_image_width'] = array(
-    '#type'          => 'textfield',
-    '#title'         => t('Button image width'),
-    '#default_value' => variable_get('addthis_image_width', '125'),
-    '#description'   => t('Width for button image. Example: 125'),
-  );
-  $form['addthis_button_settings']['addthis_image_height'] = array(
-    '#type'          => 'textfield',
-    '#title'         => t('Button image height'),
-    '#default_value' => variable_get('addthis_image_height', '16'),
-    '#description'   => t('Height for button image. Example: 16'),
-  );
-  $form['addthis_button_settings']['addthis_image_attributes'] = array(
-    '#type'          => 'textfield',
-    '#title'         => t('Button image HTML attributes'),
-    '#default_value' => variable_get('addthis_image_attributes', 'alt=""'),
-    '#description'   => t('Extra HTML attributes for img tag. Example: alt=""'),
-  );
 
   $form['addthis_widget_settings'] = array(
     '#type'         => 'fieldset',
@@ -148,4 +112,4 @@ function addthis_admin_settings() {
     '#description'   => t('The version of the addthis widget to use.'),
   );
   return system_settings_form($form);
-}
\ No newline at end of file
+}
diff --git addthis.info addthis.info
index 6e976f3..2d159b9 100644
--- addthis.info
+++ addthis.info
@@ -2,10 +2,10 @@
 name = AddThis
 description = Creates AddThis button as a block, to be used in themes and to node links.
 core = 7.x
-project = "addthis"
-datestamp = "1242663607"
-files[] = "addthis.module"
-files[] = "addthis.admin.inc"
+files[] = addthis.module
+files[] = addthis.admin.inc
+configure = admin/config/system/addthis
+stylesheets[all][] = addthis.css
 
 
 ; Information added by drupal.org packaging script on 2010-03-03
@@ -13,4 +13,3 @@ version = "7.x-2.1-alpha2"
 core = "7.x"
 project = "addthis"
 datestamp = "1267638604"
-
diff --git addthis.module addthis.module
index 020ed8d..fa9496f 100644
--- addthis.module
+++ addthis.module
@@ -6,183 +6,229 @@
  * Stand alone module file to handle AddThis button integration
  */
 
+define('ADDTHIS_DISPLAY_LINKS', 'links');
+
+define('ADDTHIS_DISPLAY_CONTENT', 'content');
+
 /**
- * Implement hook_permission().
+ * Implements hook_permission().
  */
 function addthis_permission() {
   return array(
     'administer addthis' => array(
-      'title' => 'Administer Addthis sharing widget',
-      'description' => 'Change which services are shown, color, etc and add addthis.com usename',
+      'title' => 'Administer AddThis sharing widget',
+      'description' => 'Change which services are shown, color, etc and add addthis.com usename.',
     ),
     'view addthis' => array(
-      'title' => 'View the addthis widget',
-      'description' => 'User can see the button which allows them to share posts',
+      'title' => 'View the AddThis widget',
+      'description' => 'User can see the button which allows them to share posts.',
     ),
   );
 }
 
 /**
- * Implement hook_node_view().
+ * Implements hook_node_view().
  */
-function addthis_node_view(&$node, $build_mode) {
-  $links = array();
-  if (user_access('view addthis')) {
-    if (($node && variable_get('addthis_nodetype_' . $node->type, 1)) &&
-      (($build_mode == 'teaser' && variable_get('addthis_display_in_teasers', '0')) ||
-      ($build_mode == 'full' && variable_get('addthis_display_in_links', '0')))) {
-      $node->content['addthis'] = array(
-        '#markup' => _addthis_create_button(array('build_mode' => $build_mode))
-      );
+function addthis_node_view($node, $build_mode) {
+  $addthis_display = variable_get('addthis_nodetype_' . $node->type, DRUPAL_DISABLED);
+  if ($addthis_display !== DRUPAL_DISABLED && user_access('view addthis')) {
+    $addthis_button = theme('addthis_button', array('node' => $node));
+    switch ($addthis_display) {
+      case ADDTHIS_DISPLAY_CONTENT:
+        $node->content['addthis_button'] = array(
+          '#markup' => $addthis_button,
+          '#weight' => 50,
+        );
+        break;
+      case ADDTHIS_DISPLAY_LINKS:
+      case 1: // Backwards support for the checkbox value from D6.
+        $node->content['links']['#links']['addthis'] = array(
+          'title' => $addthis_button,
+          'html' => TRUE,
+        );
+        break;
     }
   }
 }
 
 /**
- * Implement of hook_menu().
+ * Implements hook_menu().
  */
 function addthis_menu() {
-  $items = array();
-
   $items['admin/config/system/addthis'] = array(
-    'title'            => t('AddThis'),
-    'description'      => t('Set username and customize look and feel for <a href="http://www.addthis.com/">AddThis</a> button.'),
+    'title'            => 'AddThis',
+    'description'      => 'Set username and customize look and feel for <a href="http://www.addthis.com/">AddThis</a> button.',
     'page callback'    => 'drupal_get_form',
     'page arguments'   => array('addthis_admin_settings'),
     'access arguments' => array('administer addthis'),
     'file'             => 'addthis.admin.inc',
   );
-
   return $items;
 }
 
-
 /**
- * Implement hook_block_info();
+ * Implements hook_block_info().
  */
 function addthis_block_info() {
   return array(
     'addthis' => array (
       'info' => t('Add this button'),
-      'cache' => DRUPAL_CACHE_PER_PAGE, 
+      'cache' => DRUPAL_CACHE_PER_PAGE,
     )
   );
 }
 
 /**
- * Implement hook_block_view();
+ * Implements hook_block_view().
  */
 function addthis_block_view($delta) {
   if ($delta != 'addthis' || !user_access('view addthis')) {
     return;
   }
   return array(
-    'subject' => t('Addthis'),
-    'content' => _addthis_create_button(),
+    'subject' => t('AddThis'),
+    'content' => theme('addthis_button'),
   );
 }
 
 /**
- * Implement hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter().
  */
 function addthis_form_node_type_form_alter(&$form, $form_state, $form_id) {
-  if (isset($form['identity']['type'])) {
-    $form['addthis'] = array(
-      '#type' => 'fieldset',
-      '#title' => t('Addthis settings'),
-      '#collapsible' => TRUE,
-      '#collapsed' => TRUE,
-      '#group' => 'additional_settings',
-    );
-    $form['addthis']['addthis_nodetype'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Show AddThis button on this type of node'),
-      '#default_value' => variable_get('addthis_nodetype_' . $form['#node_type']->type, 1),
+  if (isset($form['type'])) {
+    $form['display']['addthis_nodetype'] = array(
+      '#type' => 'radios',
+      '#title' => t('Display AddThis button:'),
+      '#options' => array(
+        DRUPAL_DISABLED => t('Disabled'),
+        ADDTHIS_DISPLAY_LINKS => t('Enabled in node links'),
+        ADDTHIS_DISPLAY_CONTENT => t('Enabled in node content'),
+      ),
+      '#default_value' => variable_get('addthis_nodetype_' . $form['#node_type']->type, DRUPAL_DISABLED),
       '#description' => t('Select whether the AddThis button should be shown or not on this type of node.'),
     );
   }
 }
 
 /**
- * Implement of hook_theme().
+ * Implements hook_field_extra_fields().
+ */
+function addthis_field_extra_fields() {
+  $extra = array();
+
+  foreach (node_type_get_types() as $type) {
+    // If the AddThis button is to be displayed in the content for this node
+    // type then we should allow the user to control its output and order.
+    if (variable_get('addthis_nodetype_' . $type->type, DRUPAL_DISABLED) === ADDTHIS_DISPLAY_CONTENT) {
+      $extra['node'][$type->type] = array(
+        'display' => array(
+          'addthis_button' => array(
+            'label' => t('AddThis button'),
+            'description' => t('AddThis button'),
+            'weight' => 50,
+          ),
+        ),
+      );
+    }
+  }
+
+  return $extra;
+}
+
+/**
+ * Implements hook_theme().
  */
 function addthis_theme() {
   return array(
     'addthis_button' => array(
-      'arguments' => array(
-        'node' => NULL,
-        'teaser' => NULL,
-      ),
+      'arguments' => array('node' => NULL, 'url' => NULL, 'title' => NULL),
     ),
   );
 }
 
 /**
- * Internal function to generate code for AddThis button
- *
- * @return
- *   String containing html code for the button
+ * Add the custom JavaScript settings for the AddThis dropdown box once.
  */
-function _addthis_create_button($build_mode) {
-  global $_addthis_counter;
-  $_addthis_counter++;
-  if ($_addthis_counter == 1) {
-      drupal_add_css((drupal_get_path('module', 'addthis') .'/addthis.css'));
-      drupal_add_js(sprintf('
-	    addthis_pub = \'%s\';
-	    addthis_logo = \'%s\';
-	    addthis_logo_background = \'%s\';
-	    addthis_logo_color = \'%s\';
-	    addthis_brand = \'%s\';
-	    addthis_options = \'%s\';
-	    addthis_disable_flash = \'%s\';
-	',
-        addslashes(check_plain(variable_get('addthis_username', 'my-username'))),
-        addslashes(check_plain(variable_get('addthis_logo', 'http://www.addthis.com/images/yourlogo.png'))),
-        addslashes(check_plain(variable_get('addthis_logo_background', 'EFEFFF'))),
-        addslashes(check_plain(variable_get('addthis_logo_color', '666699'))),
-        addslashes(check_plain(variable_get('addthis_brand', 'Your Site'))),
-        addslashes(check_plain(variable_get('addthis_options', 'favorites, email, digg, delicious, myspace, facebook, google, live, more'))),
-        variable_get('addthis_options', FALSE) ? 'true' : 'false'
-      ), 'inline');
+function addthis_button_add_button_style() {
+  static $js_added;
+
+  if (!isset($js_added)) {
+    // If the dropdown has been disabled, then there is no need to add the
+    // custom settings.
+    $js_added = (bool) !variable_get('addthis_dropdown_disabled', '0');
   }
 
-  return theme('addthis_button', array('build_mode' => $build_mode));
+  if ($js_added) {
+    // Ensure this is only added once on a page.
+    $js_added = TRUE;
+
+    drupal_add_js(sprintf('
+          addthis_pub = \'%s\';
+          addthis_logo = \'%s\';
+          addthis_logo_background = \'%s\';
+          addthis_logo_color = \'%s\';
+          addthis_brand = \'%s\';
+          addthis_options = \'%s\';
+          addthis_disable_flash = \'%s\';
+      ',
+      addslashes(check_plain(variable_get('addthis_username', 'my-username'))),
+      addslashes(check_plain(variable_get('addthis_logo', 'http://www.addthis.com/images/yourlogo.png'))),
+      addslashes(check_plain(variable_get('addthis_logo_background', 'EFEFFF'))),
+      addslashes(check_plain(variable_get('addthis_logo_color', '666699'))),
+      addslashes(check_plain(variable_get('addthis_brand', 'Your Site'))),
+      addslashes(check_plain(variable_get('addthis_options', 'favorites, email, digg, delicious, myspace, facebook, google, live, more'))),
+      variable_get('addthis_options', FALSE) ? 'true' : 'false'
+    ), 'inline');
+  }
 }
 
 /**
  * Theme the AddThis button.
+ *
+ * @todo Convert to allow this to use an entity or a manual URL and title.
  */
 function theme_addthis_button($variables) {
-  $build_mode = $variables['build_mode'];
-  $https = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on';
+  addthis_button_add_button_style();
+
+  $variables += array(
+    'url' => current_path(),
+    'title' => drupal_get_title(),
+  );
+
+  // If a node object was provided then extract the node URL and title.
+  if (!empty($variables['node'])) {
+    $node = $variables['node'];
+    $uri = entity_uri('node', $node);
+    $variables['url'] = url($uri['path'], $uri['options'] + array('absolute' => TRUE));
+    $variables['title'] = entity_label('node', $node);
+  }
+
+  // If the URL provided is a relative URL, prepend the site's base URL.
+  if (!url_is_external($variables['url'])) {
+    $url = $GLOBALS['base_url'] . '/' . ltrim($url, '/');
+  }
+
+  $image_url = $GLOBALS['is_https'] ? variable_get('addthis_image_secure', 'https://secure.addthis.com/button1-share.gif') : variable_get('addthis_image', 'http://s9.addthis.com/button1-share.gif');
+  $image = theme('image', array('path' => $image_url, 'attributes' => $image_attributes, 'getsize' => FALSE));
+  $link_attributes = array('class' => array('addthis-button'));
+
+  $variables['url'] = json_encode($variables['url']);
+  $variables['title'] = json_encode($variables['title']);
+
   if (variable_get('addthis_dropdown_disabled', '0')) {
-    return ( sprintf('
-      <a href="http://www.addthis.com/bookmark.php"
-        onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);">
-      <img src="%s" width="%d" height="%d" %s /></a>
-      ',
-      $https ? addslashes(variable_get('addthis_image_secure', 'https://secure.addthis.com/button1-share.gif')) : addslashes(variable_get('addthis_image', 'http://s9.addthis.com/button1-share.gif')),
-      addslashes(variable_get('addthis_image_width', '125')),
-      addslashes(variable_get('addthis_image_height', '16')),
-      addslashes(variable_get('addthis_image_attributes', 'alt=""'))
-    ));
+    $link_attributes['onclick'] = "addthis_url = {$variables['url']}; addthis_title = {$variables['title']}; return addthis_click(this);";
   }
   else {
-    return ( sprintf('
-      <a href="http://www.addthis.com/bookmark.php"
-        onmouseover="return addthis_open(this, \'\', \'%s\', \'%s\')"
-        onmouseout="addthis_close()"
-        onclick="return addthis_sendto()"><img src="%s" width="%d" height="%d" %s /></a>
-      <script type="text/javascript" src="%s/js/' . variable_get('addthis_widget_version', '152') . '/addthis_widget.js"></script>
-      ',
-      ($build_mode == 'teaser') ? url('node/'. $node->nid, array('absolute' => 1) ) : '[URL]',
-      ($build_mode == 'teaser') ? addslashes($node->title) : '[TITLE]',
-      $https == 'on' ? addslashes(check_plain(variable_get('addthis_image_secure', 'https://secure.addthis.com/button1-share.gif'))) : addslashes(check_plain(variable_get('addthis_image', 'http://s9.addthis.com/button1-share.gif'))),
-      addslashes(variable_get('addthis_image_width', '125')),
-      addslashes(variable_get('addthis_image_height', '16')),
-      filter_xss(variable_get('addthis_image_attributes', 'alt=""')),
-      $https == 'on' ? 'https://secure.addthis.com' : 'http://s7.addthis.com'
-    ));
+    $link_attributes['onmouseover'] = "return addthis_open(this, '', {$variables['url']}, {$variables['title']});";
+    $link_attributes['onmouseout'] = "return addthis_close();";
+    $link_attributes['onclick'] = "return addthis_sendto();";
+
+    $js_url = $GLOBALS['is_https'] ? 'https://secure.addthis.com' : 'http://s7.addthis.com';
+    $js_url .= '/js/' . variable_get('addthis_widget_version', '152') . '/addthis_widget.js';
+    drupal_add_js($js_url, array('type' => 'external', 'scope' => 'footer'));
   }
+
+  $output = l($image, 'http://www.addthis.com/bookmark.php', array('html' => TRUE, 'attributes' => $link_attributes));
+
+  return $output;
 }
