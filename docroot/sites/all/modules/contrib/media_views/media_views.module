<?php

/**
 * @file
 * Provides Views integration for Media browsers.
 *
 * @todos:
 * http://drupal.org/node/962110 - Display field for media file entities
 * http://drupal.org/node/1192326 - Views integration for file entity type
 * http://drupal.org/node/1139514 - Overhaulf media browser code
 * Ensure this works with multiple select.
 */

/**
 * Implements hook_view_api().
 */
function media_views_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data().
 */
function media_views_views_data() {
  $data['file_managed']['media_browser_link'] = array(
    'field' => array(
      'title' => t('Media browser link'),
      'help' => t('Provide a simple link to select the file in the media browser.'),
      'handler' => 'views_handler_field_file_link_media_browser',
    ),
  );

  return $data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_views_form_media_admin_config_browser_alter(&$form, &$form_state) {
  // Build the list of file views.
  $options = array();
  foreach (views_get_all_views() as $view) {
    if ($view->base_table != 'file_managed') {
      continue;
    }
    foreach ($view->display as $display) {
      //$view_name = $view->get_human_name();
      $options[$view->name . ':' . $display->id] = $view->	name /*$view_name*/ . ': ' . _media_views_get_view_display_title($view, $display->id);
    }
  }

  $form['media_admin_views_enabled'] = array(
    '#title' => t('Enable views in browser'),
    '#type' => 'checkboxes',
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get('media_admin_views_enabled', array()),
    '#description' => t('A view must have a base table of <em>file_managed</em> in order to be used as a media browser.'),
    '#access' => !empty($options),
  );
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_views_media_browser_plugin_info() {
  $plugins = array();

  $views = array_filter(variable_get('media_admin_views_enabled', array()));
  if (!empty($views)) {
    // Get all of the views that are type file
    foreach ($views as $view_name) {
      list($view_name, $display) = explode(':', $view_name . ':default');
      if ($view = views_get_view($view_name)) {
        $plugins[$view_name . ':' . $display] = array(
          '#title' => $view_name . ': ' . _media_views_get_view_display_title($view, $display),
          '#weight' => 0,
        );
      }
    }
  }

  return $plugins;
}

/**
 * Implements hook_media_browser_plugin_view().
 */
function media_views_media_browser_plugin_view($plugin_name, $params) {
  $path = drupal_get_path('module', 'media');

  module_load_include('inc', 'media', 'includes/media.admin');
  module_load_include('inc', 'media', 'includes/media.pages');

  $types = isset($params['types']) ? $params['types'] : array();

  // The multiselect parameter is a string.  So we check to see if it is set and
  // adjust the local variable accordingly.
  $multiselect = FALSE;
  if (isset($params['multiselect']) && $params['multiselect'] != 'false') {
    $multiselect = TRUE;
  }

  //$redirect = array('media/browser', array('query' => array('render' => 'media-popup')));

  // Get the enabled media browser views.
  if ($views = variable_get('media_admin_views_enabled', array())) {
    // Was this view requested?
    if (in_array($plugin_name, $views)) {
      list($view_name, $display_id) = explode(':', $plugin_name . ':default');
      if (($view = views_get_view($view_name)) && $view->access($display_id)) {
        $build = array(
          // Output the view and add a an empty form-actions div at the bottom
          // for Media to attach its fake cancel button to.
          '#markup' => $view->preview($display_id) . '<div class="form-actions form-wrapper"></div>',
          '#title' => check_plain($view->get_title()),
        );
        return $build;
      }
    }
  }

  return array();
}

function _media_views_get_file_views() {
  $options = array();
  foreach (views_get_all_views() as $view) {
    if ($view->base_table != 'file_managed') {
      continue;
    }
    foreach ($view->display as $display) {
      $options[$view->name . ':' . $display->id] = $view->name . ': ' . _media_views_get_view_display_title($view, $display->id);
    }
  }
  return $options;
}

function _media_views_get_view_display_title($view, $display) {
  $title = $view->display[$display]->display_title;
  if (!empty($view->display[$display]->display_options['title'])) {
    $title = $view->display[$display]->display_options['title'];
  }
  return $title;
}

/**
 * Implementation of hook_preprocess_views_view_table().
 *
 * This is done to convert the "type" field to a thumbnail for image files.
 */
function media_views_preprocess_views_view_table(&$vars) {
  // Custom handling for the media browser view
  if ($vars['view']->name == 'media_browser_files') {
    foreach ($vars['rows'] as $id => $row) {
      // Is this file an image?
      if (strstr(file_get_mimetype($row['uri_1']), 'image')) {
        // Is this file on the local file system?
        if (file_exists($row['uri_1'])) {
          $row['uri_1'] = theme('image_style', array(
            'path' => $row['uri_1'],
            'style_name' => 'thumbnail',
          ));
          
          // Make the image a link.
          $row['uri_1'] = l($row['uri_1'], 'media/browser', array('html' => TRUE, 'query' => array('render' => 'media-popup', 'fid' => $row['fid'])));
        }
      }
      // Assign the databack
      $vars['rows'][$id] = $row;
    }
  }
}
