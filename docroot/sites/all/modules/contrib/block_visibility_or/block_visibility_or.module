<?php

/**
 * Modules should return this value from hook_sshkey_access() to allow access
 * to an SSH key.
 */
define('BLOCK_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_sshkey_access() to deny access
 * to a SSH key.
 */
define('BLOCK_ACCESS_DENY', 'deny');

/**
 * Modules should return this value from hook_sshkey_access() to not affect
 * SSH key access.
 */
define('BLOCK_ACCESS_IGNORE', NULL);

/**
 * Implements hook_module_implements_alter().
 */
function block_visibility_or_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'block_list_alter') {
    unset($implementations['block']);
    unset($implementations['node']);
    unset($implementations['block_visibility_or']);
    $implementations = array('block_visiblity_or' => FALSE) + $implementations;
  }
}

/**
 * Access callback for block operations.
 */
function block_visibility_or_access($op, $block, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!in_array($op, array('view'), TRUE)) {
    // If $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  // Default user_access() checks to use the current user.
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  $cid = $block->module . ':' . $block->delta . ':' . $GLOBALS['theme_key'];

  // If we've already checked access for this block, user and op, return from
  // cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  // Administrators can do anything to blocks (except for view access)
  if ($op != 'view' && user_access('administer blocks', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  // We grant access to the block if both of the following conditions are met:
  // - No modules say to deny access.
  // - At least one module says to grant access.
  $access = module_invoke_all('block_access', $op, $block, $account);
  if (in_array(BLOCK_ACCESS_DENY, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }
  elseif (in_array(BLOCK_ACCESS_ALLOW, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_block_list_alter().
 */
function block_visiblity_or_block_list_alter(&$blocks) {
  global $theme_key;

  $block_ors = variable_get('block_visibility_or', array());

  foreach ($blocks as $key => $block) {
    $block->visibility_or = !empty($block_ors[$block->module . ':' . $block->delta]);
    if (!block_visibility_or_access('view', $block)) {
      unset($blocks[$key]);
      continue;
    }
  }
}

/**
 * Implements hook_block_access() on behalf of block.module.
 */
function block_block_access($op, $block, $account) {
  if (!isset($block->theme) || empty($block->status) || $block->theme != $GLOBALS['theme_key']) {
    return BLOCK_ACCESS_DENY;
  }

  // Build an array of roles for each block.
  $block_roles = &drupal_static(__FUNCTION__ . ':block-roles');
  if (!isset($block_roles)) {
    $block_roles = array();
    $result = db_query('SELECT module, delta, rid FROM {block_role}');
    foreach ($result as $record) {
      $block_roles[$record->module][$record->delta][$record->rid] = $record->rid;
    }
  }

  // If a block has no roles associated, it is displayed for every role.
  // For blocks with roles associated, if none of the user's roles matches
  // the settings from this block, remove it from the block list.
  if (isset($block_roles[$block->module][$block->delta])) {
    if (array_intersect_key($block_roles[$block->module][$block->delta], $account->roles)) {
      return BLOCK_ACCESS_ALLOW;
    }
    elseif (empty($block->visibility_or)) {
      return BLOCK_ACCESS_DENY;
    }
  }

  return BLOCK_ACCESS_IGNORE;
}

/**
 * Implements hoook_block_access() on behalf of user.module.
 */
function user_block_access($op, $block, $account) {
  // Use the user's block visibility setting, if necessary.
  if ($block->custom != BLOCK_CUSTOM_FIXED) {
    if ($account->uid && isset($account->data['block'][$block->module][$block->delta])) {
      if ($account->data['block'][$block->module][$block->delta]) {
        // User has specifically disabled the block.
        return BLOCK_ACCESS_DENY;
      }
      $enabled = $account->data['block'][$block->module][$block->delta];
    }
    elseif ($block->custom == BLOCK_CUSTOM_DISABLED) {
      return BLOCK_ACCESS_DENY;
    }
  }

  return BLOCK_ACCESS_IGNORE;
}

/**
 * Implements hoook_block_access() on behalf of system.module.
 */
function system_block_access($op, $block, $account) {
  // Match path if necessary.
  if ($block->pages) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($block->pages);
    if ($block->visibility < BLOCK_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
      // the block is displayed on all pages except those listed in $block->pages.
      // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !($block->visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($block->pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }

  if ($page_match) {
    return BLOCK_ACCESS_ALLOW;
  }
  elseif (empty($block->visibility_or)) {
    return BLOCK_ACCESS_DENY;
  }
}

/**
 * Implements hoook_block_access() on behalf of node.module.
 */
function node_block_access($op, $block, $account) {
  // Build an array of node types for each block.
  $block_node_types = &drupal_static(__FUNCTION__);
  if (!isset($block_node_types)) {
    $block_node_types = array();
    $result = db_query('SELECT module, delta, type FROM {block_node_type}');
    foreach ($result as $record) {
      $block_node_types[$record->module][$record->delta][$record->type] = TRUE;
    }
  }

  $node = menu_get_object();
  $node_types = node_type_get_types();
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2)) {
    $node_add_arg = strtr(arg(2), '-', '_');
  }

  // If a block has no node types associated, it is displayed for every type.
  // For blocks with node types associated, if the node type does not match
  // the settings from this block, remove it from the block list.
  if (isset($block_node_types[$block->module][$block->delta])) {
    if (!empty($node)) {
      // This is a node or node edit page.
      if (!empty($block_node_types[$block->module][$block->delta][$node->type])) {
        // This block should not be displayed for this node type.
        return BLOCK_ACCESS_ALLOW;
      }
      elseif (empty($block->visibility_or)) {
        return BLOCK_ACCESS_DENY;
      }
    }
    elseif (isset($node_add_arg) && isset($node_types[$node_add_arg])) {
      // This is a node creation page
      if (!empty($block_node_types[$block->module][$block->delta][$node_add_arg])) {
        // This block should not be displayed for this node type.
        return BLOCK_ACCESS_ALLOW;
      }
      elseif (empty($block->visibility_or)) {
        return BLOCK_ACCESS_DENY;
      }
    }
    elseif (empty($block->visibility_or)) {
      // This is not a node page, remove the block.
      return BLOCK_ACCESS_DENY;
    }
  }

  return BLOCK_ACCESS_IGNORE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_visibility_or_form_block_admin_configure_alter(&$form, &$form_state) {
  // Retrieve the title settings.
  $blocks = variable_get('block_visibility_or', array());

  // Add the visibility OR toggle.
  $form['visibility'] += array('settings' => array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#weight' => -20,
  ));
  $form['visibility']['settings']['block_visibility_or'] = array(
    '#type' => 'radios',
    '#title' => t('Matching visiblity conditions'),
    '#default_value' => !empty($blocks[$form['module']['#value'] . ':' . $form['delta']['#value']]) ? 1 : 0,
    '#options' => array(
      0 => t('Block must match all conditions to display'),
      1 => t('Block can match any conditions to display'),
    ),
  );

  // Add an additional submit handler.
  $form['#submit'][] = 'block_visibility_or_form_block_admin_configure_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_visibility_or_form_block_add_block_form_alter(&$form, &$form_state) {
  block_visibility_or_form_block_admin_configure_alter($form, $form_state);
}

/**
 * Form submit handler.
 */
function block_visibility_or_form_block_admin_configure_submit(&$form, &$form_state) {
  $blocks = variable_get('block_visibility_or', array());
  if (empty($form_state['values']['block_visibility_or'])) {
    unset($blocks[$form_state['values']['module'] . ':' . $form_state['values']['delta']]);
  }
  else {
    $blocks[$form_state['values']['module'] . ':' . $form_state['values']['delta']] = TRUE;
  }
  variable_set('block_visibility_or', $blocks);
}
