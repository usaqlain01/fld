Index: workbench_moderation/workbench_moderation.module
===================================================================
--- workbench_moderation/workbench_moderation.module	(revision 293)
+++ workbench_moderation/workbench_moderation.module	(working copy)
@@ -271,7 +271,6 @@
  */
 function workbench_moderation_node_update($node) {
   global $user;
-
   // Don't proceed if moderation is not enabled on this content type, or if we're replacing an
   // already-published version.
   if (!workbench_moderation_node_type_moderated($node->type) ||
@@ -647,6 +646,30 @@
     return;
   }
 
+  // Path module is stupid and doesn't load its data in node_load.
+  if (module_exists('path') && isset($node->nid)) {
+    $path = array();
+    $conditions = array('source' => 'node/' . $node->nid);
+    if ($node->language != LANGUAGE_NONE) {
+      $conditions['language'] = $node->language;
+    }
+    $path = path_load($conditions);
+    if ($path === FALSE) {
+      $path = array();
+    }
+    if (isset($node->path)) {
+      $path += $node->path;
+    }
+    $path += array(
+      'pid' => NULL,
+      'source' => 'node/' . $node->nid,
+      'alias' => '',
+      'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
+    );
+  
+    $node->path = $path;
+  }
+
   // Build a default 'current' moderation record. Nodes will lack a workbench_moderation record if
   // moderation was not enabled for their node type when they were created. In that case, assume the
   // live node is at the current revision.
@@ -1007,6 +1030,55 @@
   // If we're moderating an unpublished version and there is an existing published version, make
   // sure that the published version is live.
   if (!empty($node->workbench_moderation['published']) && empty($node->is_new)) {
+    drupal_register_shutdown_function('workbench_moderation_store');
+    workbench_moderation_set_node($node);
+  }
+}
+
+/**
+  * Stores a node for saving with the shutdown callback.
+  *
+  * @param $node
+  *   The node to be saved, or NULL to return the node.
+  *
+  * @return
+  *   The node object, if requested.
+  */
+function workbench_moderation_set_node($node = NULL) {
+  static $value;
+  if (is_null($node)) {
+    return $value;
+  }
+  $value = $node;
+}
+
+/**
+ * Get the node from workbench_moderation_set_node().
+ *
+ * @return
+ *   A node to be revised and saved.
+ */
+function workbench_moderation_get_node() {
+  return workbench_moderation_set_node();
+}
+
+/**
+ * Shutdown callback for saving a node revision.
+ *
+ * This function is called by drupal_register_shutdown_function().
+ * The purpose is to delay a node_save() call so that a live revision
+ * is not called during hook_node_update().
+ *
+ * Instead, we delay the update until the new revision is saved. This way,
+ * we can more safely call the revision and pick up changes to items
+ * that are not revisioned (such as menu and path assignments).
+ *
+ * @see workbench_moderation_moderate()
+ * @see workbench_moderation_set_node()
+ */
+function workbench_moderation_store() {
+  if ($node = workbench_moderation_get_node()) {
+    watchdog('Workbench moderation', 'Saved node revision: %node as live version for node %live.', array('%node' => $node->vid, '%live' => $node->nid), WATCHDOG_NOTICE, l($node->title, 'node/'. $node->nid));
     $live_revision = workbench_moderation_node_live_load($node);
     // Make sure we're published.
     $live_revision->status = 1;
