diff --git backup_migrate.install backup_migrate.install
index f769e26..9a77902 100644
--- backup_migrate.install
+++ backup_migrate.install
@@ -329,7 +329,7 @@ function backup_migrate_update_2004() {
   if (db_column_exists('backup_migrate_destinations', 'username')) {
     db_drop_field('backup_migrate_destinations', 'username');
   }
-  if (db_column_exists('backup_migrate_destinations', 'password')) {  
+  if (db_column_exists('backup_migrate_destinations', 'password')) {
     db_drop_field('backup_migrate_destinations', 'password');
   }
 
@@ -340,11 +340,11 @@ function backup_migrate_update_2004() {
  * Move the backup and migrate directory to the private directory.
  */
 function backup_migrate_update_7200() {
-  $from = file_directory_path('public') .'/backup_migrate';
-  $to   = file_directory_path('private') .'/backup_migrate';
+  $form = 'public://backup_migrate';
+  $to   = 'private://backup_migrate';
   if (drupal_realpath($from) && !drupal_realpath($to)) {
     if (!rename($from, $to)) {
-      drupal_set_message(t('Unable to move the backups directory to your private folder, please check file permissions and move the directory %from to %to', array('%from' => drupal_realpath($from), '%to' => drupal_realpath(file_directory_path('private')))), 'warning');
+      drupal_set_message(t('Unable to move the backups directory to your private folder, please check file permissions and move the directory %from to %to', array('%from' => drupal_realpath($from), '%to' => drupal_realpath($to))), 'warning');
     }
   }
-}
\ No newline at end of file
+}
diff --git includes/destinations.file.inc includes/destinations.file.inc
index a1b0fe0..8293554 100644
--- includes/destinations.file.inc
+++ includes/destinations.file.inc
@@ -27,6 +27,7 @@ class backup_migrate_destination_files extends backup_migrate_destination {
     if ($dir = $this->get_location()) {
       if ($this->check_dir($dir)) {
         $filepath = rtrim($dir, "/") ."/". $file->filename();
+        $filepath = drupal_realpath($filepath);
         rename($file->filepath(), $filepath);
 
         // chmod, chown and chgrp the file if needed.
@@ -135,7 +136,7 @@ class backup_migrate_destination_files extends backup_migrate_destination {
     }
     return $form;
   }
- 
+
   /**
    * Validate the form for the settings for the files destination.
    */
@@ -244,7 +245,7 @@ class backup_migrate_destination_files extends backup_migrate_destination {
    * Check if a file can be read remotely via http.
    */
   function test_file_readable_remotely($path, $contents) {
-    $url = $GLOBALS['base_url'] .'/'. file_directory_path() .'/'. str_replace('\\', '/', $path);
+    $url = file_create_url($path);
     $result = drupal_http_request($url);
     if (strpos($result->data, $contents) !== FALSE) {
       return TRUE;
@@ -259,7 +260,7 @@ class backup_migrate_destination_files extends backup_migrate_destination {
 class backup_migrate_destination_files_manual extends backup_migrate_destination_files {
   var $supported_ops = array('manual backup', 'restore', 'list files', 'configure', 'delete');
   function __construct($params = array()) {
-    $dir = file_directory_path('private') .'/backup_migrate/manual';
+    $dir = 'private://backup_migrate/manual';
     parent::__construct($params + array('location' => $dir, 'name' => t('Manual Backups Directory')));
   }
 }
@@ -270,8 +271,7 @@ class backup_migrate_destination_files_manual extends backup_migrate_destination
 class backup_migrate_destination_files_scheduled extends backup_migrate_destination_files {
   var $supported_ops = array('scheduled backup', 'restore', 'list files', 'configure', 'delete');
   function __construct($params = array()) {
-    $dir = file_directory_path('private') .'/backup_migrate/scheduled';
+    $dir = 'private://backup_migrate/scheduled';
     parent::__construct($params + array('location' => $dir, 'name' => t('Scheduled Backups Directory')));
   }
 }
-
diff --git includes/files.inc includes/files.inc
index 7b814ec..5b120d4 100644
--- includes/files.inc
+++ includes/files.inc
@@ -32,14 +32,14 @@ function _backup_migrate_temp_files_delete() {
   }
 
   // Delete temp files abandoned for 6 or more hours.
-  $dir = file_directory_path('temporary://');
+  $dir = file_stream_wrapper_get_instance_by_scheme('temporary')->getDirectoryPath();
   $expire = time() - variable_get('backup_migrate_cleanup_time', 21600);
   if (file_exists($dir) && is_dir($dir) && is_readable($dir) && $handle = opendir($dir)) {
     while (FALSE !== ($file = @readdir($handle))) {
       // Delete 'backup_migrate_' files in the temp directory that are older than the expire time.
       // We should only attempt to delete writable files to prevent errors in shared environments.
       // This could still cause issues in shared environments with poorly configured file permissions.
-      if (strpos($file, 'backup_migrate_') === 0 && is_writable($file->filename) && @filectime($file->filename) < $expire) {
+      if (strpos($file, 'backup_migrate_') === 0 && is_writable($file) && @filectime($file) < $expire) {
         unlink("$dir/$file");
       }
     }
@@ -418,4 +418,3 @@ class backup_file {
     $this->path = $file;
   }
 }
-
