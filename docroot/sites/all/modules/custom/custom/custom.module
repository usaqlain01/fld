<?php

/**
 * @file
 *
 * Custom code specific to this site.
 *
 * @copyright (C) Copyright 2009 Palantir.net
 * @license http://www.gnu.org/licenses/gpl-2.0.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_hook_info_alter().
 */
function custom_hook_info_alter(&$hooks) {
  // Add support for modulename.block.inc if block_export is disabled.
  $block_hooks = array(
    'block_info',
    'block_info_alter',
    'block_list_alter',
    'block_configure',
    'block_save',
    'block_view',
    'block_view_alter',
  );

  $block_hooks = array_combine($block_hooks, $block_hooks);
  foreach ($block_hooks as $hook => $info) {
    if (!isset($hooks[$hook])) {
      $hooks[$hook] = array('group' => 'block');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function custom_module_implements_alter(&$implementations, $hook) {
  // Disable the custom_block_info_alter() if the block export module is not
  // available.
  if ($hook == 'block_info_alter' && !module_exists('block_export')) {
    unset($implementations['custom']);
  }
}

/**
 * Implements hook_menu().
 *
 * Provide a 'Photos' tab for privileged users on photo_gallery and section_front nodes.
 */
function custom_menu() {
  $items = array();

  $items['node/%node/photos'] = array(
    'title' => 'Photos',
    'page callback' => 'custom_photos_tab',
    'page arguments' => array(1),
    'access callback' => 'custom_access_photos_tab',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['microsite-taxonomy/v/%taxonomy_vocabulary_machine_name'] = array(
    'title' => 'Vocabulary',
    'page callback' => 'custom_microsite_taxonomy_vocabulary',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['microsite-taxonomy/t/%taxonomy_vocabulary_machine_name'] = array(
    'title' => 'Terms',
    'page callback' => 'custom_microsite_taxonomy_terms',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  if (module_exists('views_ui')) {
    $items['admin/structure/custom/revert/views'] = array(
      'title' => 'Custom - Views Revert',
      'description' => 'Reverts only those views in the db which match code',
      'page callback' => 'custom_revert_views',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

function custom_microsite_taxonomy_vocabulary($vocabulary) {
  drupal_json_output($vocabulary);
  exit;
}

function custom_microsite_taxonomy_terms($vocabulary) {
  $terms = taxonomy_get_tree($vocabulary->vid);
  drupal_json_output($terms);
  exit;
}

/**
 * revert views
 *
 * When you export a view, you can call this function to revert the view in the
 * database.  It compares exported code from the database
 * to code that has already been exported to a file.  If they match, then the
 * database view is reverted.  Also provides a convenient list of views which
 * have not been exported yet.
 *
 * You can run this manually or via an update hook as needed
 */
function custom_revert_views() {
  $db_views = views_get_all_views();
  $directory = 'views';
  $extension = 'view.inc';

  // review each db view and compare to code
  foreach($db_views as $db_view) {
    if($db_view->type == 'Overridden') {
      $codecode = '';
      $view_name = $db_view->name;
      $dbcode = "<?php\n" . $db_view->export();
      $file = drupal_get_path('module', 'custom') . "/$directory/" . $view_name . ".$extension";
      if(file_exists($file)) {
        $codecode = file_get_contents($file);
        // reverting db view
        if($dbcode == $codecode) {
          $reverted_views_items[] = $db_view->name;
          $db_view->delete();
        }
        else {
          // needs to be exported again
          $export_views_items[] = $db_view->name;
        }
      }
    }
    else if($db_view->type == 'Normal') {
      $new_views_items[] = $db_view->name;
    }
  }

  // prep for display
  $output = '<p>' . t('Views are listed when they are reverted or need to be exported.');

  if (!empty($reverted_views_items)) {
    sort($reverted_views_items);
    $reverted_views = theme_item_list(array(
        'items' => $reverted_views_items,
        'title' => t('Reverted'),
        'type' => 'ul',
        'attributes' => array(),
      )
    );
    $output .= $reverted_views;
  }
  else {
    $output .= '<p>' . t('No views reverted');
  }

  if(!empty($export_views_items)) {
    sort($export_views_items);
    $export_views = theme_item_list(array(
        'items' => $export_views_items,
        'title' => t('Please Export'),
        'type' => 'ul',
        'attributes' => array(),
      ))
      . t('(There are differences between the database and code.)');
      $output .= $export_views;
  }
  else {
    $output .= '<p>' . t('No views to export');
  }

  if(!empty($new_views_items)) {
    sort($new_views_items);
    $new_views = theme_item_list(array(
        'items' => $new_views_items,
        'title' => t('New Views to Export'),
        'type' => 'ul',
        'attributes' => array(),
      )
    );
    $output .= $new_views;
  }
  else {
    $output .= '<p>' . t('No new views to export');
  }

  return $output;
}

/**
 * Implements hook_menu_alter().
 */
function custom_menu_alter(&$items) {
  $items['user/%user/view'] = array(
    'title' => 'Profile',
    'type' => 140,
    'weight' => -10,
  );
  
  //THIS IS NEEDED UNTIL WE UPGRADE MEDIA MODULE
  $items['admin/workbench/media/add']['file'] = 'media.pages.inc';
}


/**
 * Implements hook_node_view_alter().
 *
 * Edit the node display to match the designs.
 */
function custom_node_view_alter(&$build) {
  if (($build['#node']->type == 'article' || $build['#node']->type == 'blog') && $build['#view_mode'] != 'teaser') {
    if (!empty($build['body'][0]['#markup'])) {
      $body = &$build['body'][0]['#markup'];

      // Move the quote field to below the third body paragraph.
      if (!empty($build['field_quote'][0])) {
        $quote_inline['#prefix'] = '<div id="block-inline-field-quote" class="block block-inline-field">';
        $quote_inline['title']['#markup'] = '<h2 class="block-title">' . t('Related quote') . '</h2>';
        $quote_inline['content'] = array(
          '#prefix' => '<div class="content">',
          '#markup' => drupal_render($build['field_quote']),
          '#suffix' => '</div>',
        );
        $quote_inline['#suffix'] = '</div>';

        $paragraphs = explode('<p>', $body, 5);
        $last_paragraph = &$paragraphs[count($paragraphs) - 1];
        $last_paragraph = drupal_render($quote_inline) . $last_paragraph;
        hide($build['field_quote']);
        $body = implode('<p>', $paragraphs);
      }

      // Move the Related Multimedia to the beginning of the body field but below the related audio.
      if(!empty($build['field_related_multimedia'][0]['#markup'])){
        $media_inline['#prefix'] = '<div id="block-inline-field-related-multimedia" class="block block-inline-field">';
        $media_inline['#suffix'] = '</div>';
        $media_inline['title']['#markup'] = '<h2 class="block-title">' . t('Related Multimedia') . '</h2>';
        $media_inline['content'] = array(
          '#prefix' => '<div class="content">',
          '#markup' => drupal_render($build['field_related_multimedia']),
          '#suffix' => '</div>',
        );
        $body = preg_replace('/\<p\>/i', "<p>" . drupal_render($media_inline), $body, 1);
        hide($build['field_related_multimedia']);
      }

      // Move the audio file to at the beginning of the body field.
      if (!empty($build['field_audio_file'][0])) {
        $top_inline['#prefix'] = '<div id="block-inline-field-audio-file" class="block block-inline-field">';
        $top_inline['#suffix'] = '</div>';
        $top_inline['title']['#markup'] = '<h2 class="block-title">' . t('Related Audio') . '</h2>';
        $top_inline['content'] = array(
          '#prefix' => '<div class="content">',
          '#markup' => drupal_render($build['field_audio_file']),
          '#suffix' => '</div>',
        );
        if (!empty($build['field_audio_file']['#items'][0]['description'])) {
          $top_inline['content']['#markup'] .= '<div class="field field-name-field-audio-file-description"><p>' . check_plain($build['field_audio_file']['#items'][0]['description']) . '</p></div>';
        }
        $body = preg_replace('/\<p\>/i', "<p>" . drupal_render($top_inline), $body, 1);
        hide($build['field_audio_file']);
      }
      // Move the audio file to at the beginning of the body field.
      if (!empty($build['field_audio'][0])) {
        $top_inline['#prefix'] = '<div id="block-inline-field-audio-file" class="block block-inline-field">';
        $top_inline['#suffix'] = '</div>';
        $top_inline['title']['#markup'] = '<h2 class="block-title">' . t('Related Audio') . '</h2>';
        $top_inline['content'] = array(
          '#prefix' => '<div class="content">',
          '#markup' => drupal_render($build['field_audio']),
          '#suffix' => '</div>',
        );
        if (!empty($build['field_audio_file']['#items'][0]['description'])) {
          $top_inline['content']['#markup'] .= '<div class="field field-name-field-audio-file-description"><p>' . check_plain($build['field_audio']['#items'][0]['description']) . '</p></div>';
        }
        $body = preg_replace('/\<p\>/i', "<p>" . drupal_render($top_inline), $body, 1);
        hide($build['field_audio']);
      }
    }
  }
  elseif ($build['#node']->type == 'dept_div_collections_landing') {
    // Modify "Dept/Div Collections Landing" nodes with data from their corresponding
    // "Department/Division Page" node.
    $node = $build['#node'];

    // Load the taxonomy term object.
    if ($term = current(entity_load('taxonomy_term', array($node->field_dept_division_tags[$node->language][0]['tid'])))) {
      // Look up ONE department_division_page tagged with this term.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', 'department_division_page')
            ->propertyCondition('status', 1)
            ->fieldCondition('field_dept_division_tags', NULL, $term->tid)
            ->range(0, 1);
      $result = $query->execute();
      // Load the department_division_page, if one was found.
      if (!empty($result['node'])) {
        $dept = current(entity_load('node', array_keys($result['node'])));
        // Is this page for a department or a division?
        $dept_div = 'department';
        if (isset($term->field_dept_div[$node->language][0]['value']) && $term->field_dept_div[$node->language][0]['value'] == 1) {
          $dept_div = 'division';
        }
        // Add a link back to the "Department/Division Page" node.
        /*
        $build['custom_department_division_link'] = array(
          '#markup' => l(t('Visit the @term @dept_div page', array('@term' => $term->name, '@dept_div' => $dept_div)), 'node/' . $dept->nid),
        );
        */
      }
    }
  }
  if ($build['#node']->type == 'department_division_page') {
    if (trim($build['#node']->field_areas_featured_choice['und'][0]['value']) == 'featuredlinks' ) {
      $build['field_department_links']['#title'] = t('Featured Links');
    }
    if (trim($build['#node']->field_areas_featured_choice['und'][0]['value']) == 'research' ) {
      $build['field_department_links']['#title'] = t('Areas of Research');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the site-wide contact form to change the 'Category' field label.
 *
 * @see http://www.palprojects.com/projects/85/tickets/201
 * @see custom_form_contact_site_form_validate()
 * @see custom_form_contact_site_form_submit()
 */
function custom_form_contact_site_form_alter(&$form, $form_state) {
  $form['cid']['#title'] = t('I have a question/comment about...');
  $form['subject']['#access'] = FALSE;
  $form['subject']['#required'] = FALSE;

  $form['follow_up'] = array(
    '#type' => 'radios',
    '#title' => t('Follow up'),
    '#options' => array(
      'none' => t('Do not contact me'),
      'mail' => t('Contact me via e-mail'),
      'phone' => t('Contact me via phone'),
    ),
    '#default_value' => 'none',
  );
  $form['phone_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Your phone number'),
    '#default_value' => '',
    '#size' => 10,
    '#maxlength' => 15,
    '#states' => array(
      'visible' => array(
        ':input[name=follow_up]' => array('value' => 'phone'),
      ),
    ),
  );

  $form['#validate'][] = 'custom_form_contact_site_form_validate';
  array_unshift($form['#submit'], 'custom_form_contact_site_form_submit');
}

/**
 * Validate handler for contact_site_from_validate.
 *
 * @see custom_form_contact_site_form()
 */
function custom_form_contact_site_form_validate($form, $form_state) {
  // If the user has requested a phone follow-up, then make sure they entered
  // a value.
  if ($form_state['values']['follow_up'] == 'phone') {
    $phone_number = $form_state['values']['phone_number'];
    if (!drupal_strlen($phone_number)) {
      form_set_error('phone_number', t('Your phone number is required.'));
    }
  }
}

/**
 * Submit handler for contact_site_from_validate.
 *
 * @see custom_form_contact_site_form()
 */
function custom_form_contact_site_form_submit($form, &$form_state) {
  // Append the follow-up request into the message body.
  switch ($form_state['values']['follow_up']) {
    case 'none':
      $form_state['values']['message'] .= "\n--\n\n" . t('Follow-up requested: none.');
      break;
    case 'mail':
      $form_state['values']['message'] .= "\n--\n\n" . t('Follow-up requested: e-mail.');
      break;
    case 'phone':
      $form_state['values']['message'] .= "\n--\n\n" . t('Follow-up requested: phone (@phone).', array('@phone' => $form_state['values']['phone_number']));
      break;
  }
}

/**
 * Fetches an array of exportables from files.
 *
 * @param String $directory
 *   The subdirectory in the custom module.
 * @param String $extension
 *   The file extension.
 * @param String $name
 *   The name of the variable found in each file. Defaults to the same as
 *   $extension.
 * @return
 *   Array of $name objects.
 */
function custom_get_all_exports($directory, $extension, $name = NULL) {
  if (!$name) {
    $name = $extension;
  }

  $return = array();
  // Find all the files in the directory with the correct extension.
  $files = file_scan_directory(drupal_get_path('module', 'custom') . "/$directory", "/.$extension/");
  foreach ($files as $path => $file) {
    require $path;
    if (isset($$name)) {
      $return[$$name->name] = $$name;
    }
  }

  return $return;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function custom_field_formatter_info() {
  return array(
    'custom_comma_taxonomy_term_reference' => array(
      'label' => t('Comma Separated Links'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'custom_email_plain_text' => array(
      'label' => t('Plain Text'),
      'field types' => array('email'),
    ),
    'custom_field_as_view' => array(
      'label' => t('Custom: Field as View'),
      'field types' => array('node_reference', 'user_reference', 'taxonomy_term_reference'),
      'settings' => array(
        'view' => NULL,
        'display' => 'default',
        'group_values' => FALSE,
      ),
    ),
    'custom_toggle_trimmed' => array(
      'label' => t('Custom: Toggle trimmed text'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array(
        'trim_length' => 600,
        'toggle_add_ellipses' => TRUE,
        'toggle_link_more' => t('More'),
        'toggle_link_less' => t('Less'),
      ),
    ),
    'custom_link_field_url' => array(
      'label' => t('Custom: Link Field Display Only If URL Present'),
      'field types' => array('link_field'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info_alter().
 *
 * Add a custom setting to every field formatter.
 *
 * @see custom_field_formatter_info_alter()
 * @see custom_field_formatter_settings_form_alter()
 * @see custom_field_formatter_settings_summary_alter()
 * @see custom_field_attach_view_alter()
 */
function custom_field_formatter_info_alter(&$info) {
  foreach (array_keys($info) as $field_name) {
    $info[$field_name]['settings']['custom_collapsible'] = 0;
    $info[$field_name]['settings']['custom_collapsible_collapsed'] = 0;
  }
}

/**
 * Implementation of hook_field_formatter_settings_summary().
 */
function custom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $output = '';

  if ($display['type'] == 'custom_field_as_view') {
    if ($settings['view'] && $settings['display']) {
      $output = t('View: %view, Display: %display, Multiple values as single argument: %multiple',
               array('%view' => $settings['view'], '%display' => $settings['display'], '%multiple' => ($settings['group_values'] ? 'Yes' : 'No')));
    }
    else {
      $output = t('No content will appear for this field until you update these settings.');
    }
  }
  elseif ($display['type'] == 'custom_toggle_trimmed') {
    $instance_trimmed = $instance;
    $instance_trimmed['display'][$view_mode]['type'] = 'text_trimmed';
    $instance_trimmed['display'][$view_mode]['module'] = 'text';
    $output = text_field_formatter_settings_summary($field, $instance_trimmed, $view_mode) . ', ' .
           t('Toggle link') . ': ' . $settings['toggle_link_more'] . '/' . $settings['toggle_link_less'];
  }

  return $output;
}

/**
 * Implementation of field_formatter_settings' hook_field_formatter_settings_summary_alter().
 *
 * Add text describing whether our custom_collapsible settings are set. At the very least, return a
 * space -- otherwise the formatter settings button will not be rendered.
 *
 * @see custom_field_formatter_info_alter()
 * @see custom_field_formatter_settings_form_alter()
 * @see custom_field_attach_view_alter()
 */
function custom_field_formatter_settings_summary_alter(&$summary, array $context) {
  $display = $context['instance']['display'][$context['view_mode']];

  // If our custom formatter settings are configured, add info to the summary.
  if (isset($display['settings']['custom_collapsible'])) {
    if ($display['settings']['custom_collapsible'] && $settings['custom_collapsible_collapsed']) {
      $summary .= ' (Custom - collapsed)';
    }
    elseif ($display['settings']['custom_collapsible']) {
      $summary .= ' (Custom - collapsible)';
    }
  }

  // If the field is not hidden, make sure the summary has something in it. This way, the formatter
  // settings button will always appear.
  if (empty($summary) && $display['type'] != 'hidden') {
    $summary = ' ';
  }
}

/**
 * Implementation of hook_field_formatter_settings_form().
 */
function custom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'custom_field_as_view') {
    $element['info'] = array(
      '#type' => 'item',
      '#description' => t('This formatter lets you use the field value as the first argument to a View.'),
    );

    $views = views_get_all_views();
    $view_options = array_combine(array_keys($views), array_keys($views));
    $element['view'] = array(
      '#type' => 'select',
      '#title' => 'View',
      '#options' => $view_options,
      '#default_value' => $settings['view'],
    );

    if ($view_name = $settings['view']) {
      $display_options = array();
      foreach ($views[$view_name]->display as $display_name => $display) {
        $display_options[$display_name] = $display->display_title . " ($display_name)";
      }
      $element['display'] = array(
        '#type' => 'select',
        '#title' => 'Display',
        '#options' => $display_options,
        '#default_value' => $settings['display'],
      );
    }
    else {
      $element['display'] = array(
        '#type' => 'item',
        '#title' => t('Display'),
        '#description' => t('Save and re-visit this form to choose a display.'),
      );
    }

    $element['group_values'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use multiple field values as a single argument.'),
      '#description' => t("Your View's argument must have 'Allow multiple terms per argument' checked."),
      '#default_value' => $settings['group_values'],
    );
  }
  elseif ($display['type'] == 'custom_toggle_trimmed') {
    $instance_trimmed = $instance;
    $instance_trimmed['display'][$view_mode]['type'] = 'text_trimmed';
    $instance_trimmed['display'][$view_mode]['module'] = 'text';
    $element = text_field_formatter_settings_form($field, $instance_trimmed, $view_mode, $form, $form_state);

    $element['toggle_add_ellipses'] = array(
      '#type' => 'select',
      '#title' => t('Add Ellipses'),
      '#options' => array(TRUE => t('True'), FALSE => t('False')),
      '#default_value' => $settings['toggle_add_ellipses'],
    );
    $element['toggle_link_more'] = array(
      '#type' => 'textfield',
      '#title' => t('More'),
      '#default_value' => $settings['toggle_link_more'],
    );
    $element['toggle_link_less'] = array(
      '#type' => 'textfield',
      '#title' => t('Less'),
      '#default_value' => $settings['toggle_link_less'],
    );
  }

  return $element;
}

/**
 * Implementation of field_formatter_settings' hook_field_formatter_settings_form_alter().
 *
 * Add checkboxes to configure 'collapsible' field displays to all field formatter settings forms.
 *
 * @see custom_field_formatter_info_alter()
 * @see custom_field_formatter_settings_summary_alter()
 * @see custom_field_attach_view_alter()
 */
function custom_field_formatter_settings_form_alter(array &$settings_form, array $context) {
  $settings_form['custom_collapsible'] = array(
    '#type' => 'checkbox',
    '#title' => t('Custom: make this field collapsible'),
    '#default_value' => $context['formatter']['settings']['custom_collapsible'],
  );
  $settings_form['custom_collapsible_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Custom: initially collapsed'),
    '#default_value' => $context['formatter']['settings']['custom_collapsible_collapsed'],
  );
}

function custom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'custom_comma_taxonomy_term_reference':
      $count = count($items);
      foreach ($items as $delta => $item) {
        $suffix = '';
        if ($count > 1 && $delta < ($count - 1)) {
          $suffix = ', ';
        }
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
            '#suffix' => $suffix,
          );
        }
        else {
          $term = $item['taxonomy_term'];
          $uri = entity_uri('taxonomy_term', $term);
          if ($term->vid == 5) {
            $uri['path'] = 'about/staff';
            $uri['options']['query'] = array('department' => $term->tid);
          }
          $element[$delta] = array(
            '#type' => 'link',
            '#title' => $term->name,
            '#href' => $uri['path'],
            '#options' => $uri['options'],
            '#suffix' => $suffix,
          );
        }
      }
      break;
    case 'custom_email_plain_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => check_plain($item['email']),
        );
      }
      break;
    case 'custom_field_as_view':
      $key = key($field['columns']);
      if ($display['settings']['view'] && $display['settings']['display']) {
        if ($display['settings']['group_values']) {
          $arguments = array();
          foreach ($items as $item) {
            $arguments[] = $item[$key];
          }
          $element[0]['#markup'] = views_embed_view($display['settings']['view'], $display['settings']['display'], implode(',', $arguments));
        }
        else {
          foreach ($items as $delta => $item) {
            $element[$delta] = array(
              '#markup' => views_embed_view($display['settings']['view'], $display['settings']['display'], $item[$key]),
            );
          }
        }
      }
      break;
    case 'custom_toggle_trimmed':
      $display_summary = $display;
      $display_summary['type'] = 'text_trimmed';
      $display_summary['module'] = 'text';
      $element_summary = text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display_summary);

      $display_full = $display;
      $display_full['type'] = 'text_default';
      $display_full['module'] = 'text';
      $element_full = text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display_full);

      foreach ($items as $delta => $item) {
        if ($element_summary[$delta]['#markup'] != $element_full[$delta]['#markup']) {
          $element[$delta] = array(
            '#markup' => theme('custom_toggle_trimmed', array(
                               'summary' => $element_summary[$delta]['#markup'],
                               'full' => $element_full[$delta]['#markup'],
                               'more' => check_plain($display['settings']['toggle_link_more']),
                               'less' => check_plain($display['settings']['toggle_link_less']),
                               'ellipses' => $display['settings']['toggle_add_ellipses'])),
          );
        }
        else {
          $element[$delta] = array('#markup' => $element_full[$delta]['#markup']);
        }
      }
      break;
    case 'custom_link_field_url':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => theme('custom_link_field_url', array('element' => $item)),
        );
      }
      break;
  }

  return $element;
}

/*
 * If the display type on the field is custom_comma_taxonomy_term_reference
 * prepare the formatter using the taxonomy_field_formatter_prepare_view to load the taxonomy object.
 * TODO: Find out if the taxonomy module needs to be loaded / included here.
 */
function custom_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($entities as $id => $entity) {
    if($displays[$id]['type'] == 'custom_comma_taxonomy_term_reference') {
      taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function custom_views_api() {
  return array('api' => 2);
}

/**
 * Implements hook_views_default_views().
 */
function custom_views_default_views() {
  return custom_get_all_exports('views', 'view.inc', 'view');
}

/**
 * Implements hook_views_data()
 */
function custom_views_data() {
  $data['views']['photo_gallery_textarea'] = array(
    'title' => t('Photo Gallery Textarea'),
    'help' => t('Provide a text area with a token to the Photo Gallery displayed on.'),
    'area' => array(
      'handler' => 'custom_handler_area_photo_gallery_textarea',
    ),
  );
  $data['views']['argument_textarea'] = array(
    'title' => t('Pass Argument Textarea'),
    'help' => t('Use the current argument values.  For example, arguments could be added to a link to pass them to another view.'),
    'area' => array(
      'handler' => 'custom_handler_area_argument_textarea',
    ),
  );
  $data['views']['pager_tokens'] = array(
    'title' => t('Pager Tokens'),
    'help' => t('Textarea with result count and other pager-related tokens.'),
    'area' => array(
      'handler' => 'custom_handler_area_pager_tokens',
    ),
  );
  $data['views']['pager'] = array(
    'title' => t('Pager'),
    'help' => t('The rendered pager for the View.'),
    'area' => array(
      'handler' => 'custom_handler_area_pager',
    ),
  );
  return $data;
}

/**
 * Implements hook_media_field_view_modes_alter().
 *
 * Media has a custom patch which allows us to push image styles through to
 * media module as individual view modes.  This allows us to create a 1 to 1
 * relationship between Image Styles and Media Type formatters.
 */
function custom_media_field_view_modes_alter(&$modes) {
  $styles = image_styles();
  foreach ($styles as $style_name => $style) {
    if (!isset($modes['media_' . $style_name])) {
      $modes['custom_' . $style_name] = array('label' => t($style['name']));
    }
  }
}

/**
 * Implements hook_quicktabs_tabstyles().
 *
 * This hook allows other modules to create additional tab styles for
 * the quicktabs module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a quick tabs style. Each value should be the name of the style.
 */
function custom_quicktabs_tabstyles() {
  $tabstyles_directory = drupal_get_path('theme', 'sitetheme') . '/css';
  $file = file_scan_directory($tabstyles_directory, '/\tabs-field.css$/');

  $tabstyles = array();
  $tabstyles[$file->filename] = 'tabs-field-custom';
  return $tabstyles;
}

/**
 * Implements hook_menu_block_blocks().
 */
function custom_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'user-menu' => array(
      'menu_name'   => 'user-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'test',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'main-menu-level-1' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => '',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'main-menu-footer-links' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => '',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 2,
      'expanded'    => 1,
      'sort'        => 0,
    ),
    'custom-1' => array(
      'menu_name'   => 'ecco-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'ECCo Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'custom-2' => array(
      'menu_name'   => 'geology-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Geology Menu Block  Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'custom-4' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Seconday menu',
      'level'       => 2,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'custom-5' => array(
      'menu_name'   => 'anthropology-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Anthropology Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'custom-6' => array(
      'menu_name'   => 'zoology-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Zoology Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'custom-7' => array(
      'menu_name'   => 'botany-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Botany Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'pritzkerlab-menu' => array(
      'menu_name'   => 'pritzkerlab-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Pritzker Lab Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'library-menu' => array(
      'menu_name'   => 'library-tabs',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Library Menu Block Tabs',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'utility-menu' => array(
      'menu_name'   => 'menu-utility-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Utility menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'copyright-menu' => array(
      'menu_name'   => 'menu-copyright-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => 'Copyright menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'main-menu-level-2' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 1,
      'admin_title' => '',
      'level'       => 2,
      'follow'      => 0,
      'depth'       => 3,
      'expanded'    => 0,
      'sort'        => 0,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function custom_theme($existing, $type, $theme, $path) {
  return array(
    // For use with the 'Custom: Toggle Trimmed' field formatter.
    'custom_toggle_trimmed' => array(
      'variables' => array('summary' => NULL, 'full' => NULL, 'more' => NULL, 'less' => NULL),
    ),
    'custom_link_field_url' => array(
      'variables' => array('element' => array()),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Replace file_styles' "file_styles_styles_default" theme function so that we can use file-type
 * icons.
 */
function custom_theme_registry_alter(&$theme_registry) {
  $theme_registry['file_styles_styles_default']['function'] = 'custom_theme_file_styles_styles_default';
}

function theme_custom_toggle_trimmed($variables) {
  // For users without javascript, only the full version is shown.
  // This uses javascript from custom.js (included in the .info file).
  return '<div class="field-toggle-text-trimmed">' .
           '<div class="toggle-trimmed-less element-hidden">' .
             $variables['summary'] .
             ($variables['ellipses'] ? '&hellip; ' : '') . '<a href="#toggle-trimmed" class="toggle-trimmed">' . $variables['more'] . '</a>' .
           '</div>' .
           '<div class="toggle-trimmed-more">' .
             $variables['full'] .
             ' <a href="#toggle-trimmed" class="toggle-trimmed">' . $variables['less'] . '</a>' .
           '</div>' .
         '</div>';
}

/**
 * Implementation of hook_field_attach_view_alter().
 *
 * Add a wrapper with the 'collapsible' and 'collapsed' classes to each field whose formatter (for
 * the current view mode) has had the custom 'collapsible' setting enabled.
 *
 * @see custom_field_formatter_info_alter()
 */
function custom_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $entity_type = $context['entity_type'];
    $entity = $context['entity'];
    $bundle = $output[$field_name]['#bundle'];
    $view_mode = $output[$field_name]['#view_mode'];

    $instance = field_info_instance($entity_type, $field_name, $bundle);
    $display = field_get_display($instance, $view_mode, $entity);

    if (isset($display['settings']['custom_collapsible']) && $display['settings']['custom_collapsible']) {
      // This uses javascript from custom.js (included in the .info file).
      $output[$field_name]['#prefix'] = '<div class="collapsible' . ($display['settings']['custom_collapsible_collapsed'] ? ' collapsed' : '') . '">';
      $output[$field_name]['#suffix'] = '</div>';
    }

    // Workaround for a core bug with file field display.
    // @todo Remove when http://drupal.org/node/932426 is fixed.
    if ($output[$field_name]['#field_type'] == 'file') {
      foreach (element_children($output[$field_name]) as $delta) {
        $item = $output[$field_name][$delta];
        if (isset($item['#file']->display) && empty($item['#file']->display)) {
          $output[$field_name][$delta]['#access'] = FALSE;
        }
      }
      $output[$field_name]['#access'] = (bool) element_get_visible_children($output[$field_name]);
    }
  }
}

/**
 * Add a submit function to the user login form so we can redirect users when they log in.
 */
function custom_form_user_login_alter(&$form, &$form_state) {
  $form['#submit'][] = 'custom_user_login_submit';
}

/**
 * Redirect users with permission to access workbench to their workbench when they log in.
 */
function custom_user_login_submit($form, &$form_state) {
  if (module_exists('workbench') && user_access('access workbench')) {
    $form_state['redirect'] = 'admin/workbench';
  }
}

function custom_access_photos_tab($node) {
  return user_access('edit media') && node_access('update', $node) && in_array($node->type, array('home_page', 'photo_gallery', 'section_front'));
}

function custom_photos_tab($node) {
  return array('#markup' => views_embed_view('photos_tab', $node->type, $node->nid));
}

/**
 * Alter the settings for the CKEditor to add our own custom styles.
 */
function custom_wysiwyg_editor_settings_alter(&$settings, $context) {
  $settings['stylesCombo_stylesSet'] = 'my_styles:'.base_path().drupal_get_path('module', 'custom').'/custom_wysiwyg_styles.js';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Move fields on the image media type into fieldsets so that the editing form is more approachable.
 */
function custom_form_media_edit_alter(&$form, &$form_state) {
  if ($form['#entity_type'] != 'media' || $form['#bundle'] != 'image') { return; }

  $form['custom_gallery'] = array(
    '#type' => 'fieldset',
    '#title' => t('In Photo Galleries'),
    '#description' => t('Add this image to photo galleries. The same metadata will be used in each place the image appears.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (array('field_imagecaption', 'field_imagecredits', 'field_imagelink', 'field_imagegalleryref', 'field_more_info_link') as $field_name) {
    $form['custom_gallery'][$field_name] = $form[$field_name];
    unset($form[$field_name]);
  }

  $form['custom_slideshow'] = array(
    '#type' => 'fieldset',
    '#title' => t('In Home Page and Section Front Slideshows'),
    '#description' => t('Place this image in slideshows. The same metadata will be used in each place the image appears.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (array('field_imagefrontref', 'field_description', 'field_imageactionlinks', 'field_homepage_image_link') as $field_name) {
    $form['custom_slideshow'][$field_name] = $form[$field_name];
    unset($form[$field_name]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Reduce list of accepted file formats
 */
function custom_form_media_add_upload_alter(&$form, &$form_state) {
  $form['upload']['#description'] = t('Allowed file types: jpg jpeg gif png.');
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides the user picture form since users are uploading via the field_image
 * field.
 */
function custom_form_user_profile_form_alter(&$form, $form_state) {
  if (!empty($form['picture'])) {
    $form['picture']['#access'] = FALSE;
  }
}

/**
 * Implements hook_user_presave().
 */
function custom_user_presave(&$edit, $account, $category) {
  if (!empty($edit['field_image'][LANGUAGE_NONE][0]['fid'])) {
    $edit['picture'] = file_load($edit['field_image'][LANGUAGE_NONE][0]['fid']);
  }
}

/**
 * Implements hook_user_load().
 */
function custom_user_load(array $accounts) {
  foreach ($accounts as $uid => $account) {
    if (empty($account->picture) && !empty($account->field_image[LANGUAGE_NONE][0]['fid'])) {
      $accounts[$uid]->picture = file_load($account->field_image[LANGUAGE_NONE][0]['fid']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter some node edit forms.
 */
function custom_form_node_form_alter(&$form, &$form_state) {
  if (in_array($form['#node']->type, array('article', 'secondary_section_front'))) {
    // The elements we want to alter aren't here yet, so add a preprocess function.
    $form['#pre_render'][] = 'custom_node_edit_form_preprocess';
  }

  $form['#attached']['css'][] = drupal_get_path('module', 'custom') . '/custom.admin.css';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This is a workaround for a bug with exposed form action URLs.
 *
 * @todo Remove when http://drupal.org/node/1023074 is fixed.
 */
function custom_form_views_exposed_form_alter(&$form, $form_state) {
  if (drupal_match_path(current_path(), 'user/*/blog')) {
    $form['#action'] = url(current_path(), array('query' => drupal_get_query_parameters()));
  }
}

/**
 * Form preprocess function to add site-specific help text to the URL alias settings on node edit
 * forms.
 */
function custom_node_edit_form_preprocess($form) {
  $form['path']['#description'] = t('On FieldMuseum.org, the first element in the path determines the color scheme of the page. For example, if you set the URL alias to <em>support/volunteer</em>, the left sidebar will be forest green, corresponding with the green "Support" of the main navigation links, and if you set it to <em>schools/outreach</em>, the left sidebar will be purple.');
  $form['path']['pathauto']['#description'] = t('Use the value of the "Content Location" field and the title to auto-generate a path.');

  $paths = array(
    '%path1' => 'visit',
    '%path2' => 'happening',
    '%path3' => 'support',
    '%path4' => 'schools',
    '%path5' => 'explore',
    '%path6' => 'about',
  );
  $form['path']['alias']['#description'] .= ' <strong>' . t('Begin your paths with %path1, %path2, %path3, %path4, %path5, or %path6 in order to place your pages within existing sections of FieldMuseum.org.', $paths) . '</strong>';

  return $form;
}

/**
 * Theme function; for the cases where you only want to display a link if a URL has been filled in.
 */
function theme_custom_link_field_url($element) {
  if (!empty($element['element']['url'])) {
    $title = $element['element']['title'] ? $element['element']['title'] : t('More information');
    return l($title, $element['element']['url'], array('attributes' => $element['element']['attributes']));
  }
  else {
    return '';
  }
}

/**
 * This is an adaptation of theme_file_styles_image() (in styles/contrib/file_styles/file_styles.theme.inc)
 * theme_file_styles_image() is unusable in this case, since it assumes the $file->uri is the image
 * path. In the case of non-image files, we want to use an image representing the file type.
 *
 * Module and theme images can't be run through imagecache. To work around this, copy files into the
 * public files directory first.
 */
function custom_theme_file_styles_styles_default($variables) {
  $file = (object) $variables['object'];
  $style_name = $variables['style_name'];
  $vars = array();

  // Build a path and absolute URL to the file type icon.
  $file_path = file_icon_path($variables['object'], drupal_get_path('module', 'media') . '/images/icons/ricebowl');
  $file_url = url($file_path, array('absolute' => TRUE));
  // Build a destination path.
  $dest_path = 'public://module-files/' . $file_path;
  $dest_dir = drupal_dirname($dest_path);
  // If the file exists, or if we can copy (download) it into the public files directory, use the
  // internal path as our image path.
  if (is_file($dest_path) || (file_prepare_directory($dest_dir) && system_retrieve_file($file_url, $dest_path, FALSE, FILE_EXISTS_REPLACE))) {
    $vars['path'] = $dest_path;
  }
  else {
    // If we have no image, return nothing.
    return;
  }

  // The rest is straight out of theme_file_styles_image().

  // Allow image attributes to be provided by the passed-in file object. 'alt'
  // and 'title' need to be separated out because they are treated specially by
  // theme_image().
  if (isset($file->override)) {
    $vars['attributes'] = $file->override;
    foreach (array('alt', 'title') as $attribute) {
      if (isset($vars['attributes'][$attribute])) {
        $vars[$attribute] = $vars['attributes'][$attribute];
        unset($vars['attributes'][$attribute]);
      }
    }
  }
  // Add default values for 'alt' and 'title'.
  if (!isset($vars['alt'])) {
    $vars['alt'] = isset($variables['description']) ? $variables['description'] : (isset($file->description) ? $file->description : '');
  }
  if (!isset($vars['title']) || $vars['title'] === '') {
    $vars['title'] = isset($variables['title']) ? $variables['title'] : $vars['alt'];
  }

  // Special case for 'original'.
  // @TODO Certainly can be more elegant than this.
  if ($style_name == 'original') {
    $vars['getsize'] = FALSE;
    return theme('image', $vars);
  }

  $vars['style_name'] = $style_name;
  //@TODO: How to add fields here?
  return theme('image_style', $vars);
}

/**
 * Implements hook_field_extra_fields().
 */
function custom_field_extra_fields() {
  $extra['user']['user']['form']['contact'] = array(
    'label' => t('Contact settings'),
    'description' => t('Contact module account form elements'),
    'weight' => 5,
  );
  $extra['user']['user']['form']['overlay_control'] = array(
    'label' => t('Administrative overlay'),
    'description' => t('Overlay module account form elements'),
    'weight' => 4,
  );
  return $extra;
}

/**
 * Implements hook_image_default_styles().
 */
/**function custom_image_default_styles() {
  $styles = array();

  $styles['thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '100',
          'height' => '75',
        ),
      ),
    ),
  );
  $styles['medium'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '160',
          'height' => '160',
        ),
      ),
    ),
  );
  $styles['large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 480,
          'height' => 480,
          'upscale' => 0,
        ),
      ),
    ),
  );
  $styles['square_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '100',
          'height' => '100',
        ),
      ),
    ),
  );
  $styles['article'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '393',
          'height' => '242',
        ),
      ),
    ),
  );
  $styles['content-full'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '630',
          'height' => '235',
        ),
      ),
    ),
  );
  $styles['content-half'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '310',
          'height' => '128',
        ),
      ),
    ),
  );
  $styles['content-half-thin'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '320',
          'height' => '115',
        ),
      ),
    ),
  );
  $styles['content-third'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '209',
          'height' => '122',
        ),
      ),
    ),
  );
  $styles['content-third-home'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '195',
          'height' => '112',
        ),
      ),
    ),
  );
  $styles['gallery-large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '340',
          'height' => '300',
        ),
      ),
    ),
  );
  $styles['homepage-centerstage'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '960',
          'height' => '300',
        ),
      ),
    ),
  );
  $styles['microsite-widgets'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 230,
          'height' => 141,
          'upscale' => 0,
        ),
      ),
    ),
  );
  $styles['profile'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '210',
          'height' => '280',
        ),
      ),
    ),
  );
  $styles['article-original-aspect'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 393,
          'height' => 393,
          'upscale' => 0,
        ),
      ),
    ),
  );
  $styles['original-aspect-thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 100,
          'height' => 100,
          'upscale' => 0,
        ),
      ),
    ),
  );

  return $styles;
}
*/
