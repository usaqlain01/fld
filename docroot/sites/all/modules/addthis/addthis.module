<?php
// $Id: addthis.module,v 1.17.2.1 2010/03/03 17:41:44 wesku Exp $

/**
 * @file
 * Stand alone module file to handle AddThis button integration
 */

define('ADDTHIS_DISPLAY_LINKS', 'links');

define('ADDTHIS_DISPLAY_CONTENT', 'content');

/**
 * Implements hook_permission().
 */
function addthis_permission() {
  return array(
    'administer addthis' => array(
      'title' => 'Administer AddThis sharing widget',
      'description' => 'Change which services are shown, color, etc and add addthis.com usename.',
    ),
    'view addthis' => array(
      'title' => 'View the AddThis widget',
      'description' => 'User can see the button which allows them to share posts.',
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function addthis_node_view($node, $build_mode) {
  $addthis_display = variable_get('addthis_nodetype_' . $node->type, DRUPAL_DISABLED);
  if ($addthis_display !== DRUPAL_DISABLED && user_access('view addthis')) {
    $addthis_button = theme('addthis_button', array('node' => $node));
    switch ($addthis_display) {
      case ADDTHIS_DISPLAY_CONTENT:
        $node->content['addthis_button'] = array(
          '#markup' => $addthis_button,
          '#weight' => 50,
        );
        break;
      case ADDTHIS_DISPLAY_LINKS:
      case 1: // Backwards support for the checkbox value from D6.
        $node->content['links']['#links']['addthis'] = array(
          'title' => $addthis_button,
          'html' => TRUE,
        );
        break;
    }
  }
}

/**
 * Implements hook_menu().
 */
function addthis_menu() {
  $items['admin/config/system/addthis'] = array(
    'title'            => 'AddThis',
    'description'      => 'Set username and customize look and feel for <a href="http://www.addthis.com/">AddThis</a> button.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('addthis_admin_settings'),
    'access arguments' => array('administer addthis'),
    'file'             => 'addthis.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function addthis_block_info() {
  return array(
    'addthis' => array (
      'info' => t('Add this button'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    )
  );
}

/**
 * Implements hook_block_view().
 */
function addthis_block_view($delta) {
  if ($delta != 'addthis' || !user_access('view addthis')) {
    return;
  }
  return array(
    'subject' => t('AddThis'),
    'content' => theme('addthis_button'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function addthis_form_node_type_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type'])) {
    $form['display']['addthis_nodetype'] = array(
      '#type' => 'radios',
      '#title' => t('Display AddThis button:'),
      '#options' => array(
        DRUPAL_DISABLED => t('Disabled'),
        ADDTHIS_DISPLAY_LINKS => t('Enabled in node links'),
        ADDTHIS_DISPLAY_CONTENT => t('Enabled in node content'),
      ),
      '#default_value' => variable_get('addthis_nodetype_' . $form['#node_type']->type, DRUPAL_DISABLED),
      '#description' => t('Select whether the AddThis button should be shown or not on this type of node.'),
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function addthis_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $type) {
    // If the AddThis button is to be displayed in the content for this node
    // type then we should allow the user to control its output and order.
    if (variable_get('addthis_nodetype_' . $type->type, DRUPAL_DISABLED) === ADDTHIS_DISPLAY_CONTENT) {
      $extra['node'][$type->type] = array(
        'display' => array(
          'addthis_button' => array(
            'label' => t('AddThis button'),
            'description' => t('AddThis button'),
            'weight' => 50,
          ),
        ),
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_theme().
 */
function addthis_theme() {
  return array(
    'addthis_button' => array(
      'arguments' => array('node' => NULL, 'url' => NULL, 'title' => NULL),
    ),
  );
}

/**
 * Add the custom JavaScript settings for the AddThis dropdown box once.
 */
function addthis_button_add_button_style() {
  static $js_added;

  if (!isset($js_added)) {
    // If the dropdown has been disabled, then there is no need to add the
    // custom settings.
    $js_added = (bool) !variable_get('addthis_dropdown_disabled', '0');
  }

  if ($js_added) {
    // Ensure this is only added once on a page.
    $js_added = TRUE;

    drupal_add_js(sprintf('
          addthis_pub = \'%s\';
          addthis_logo = \'%s\';
          addthis_logo_background = \'%s\';
          addthis_logo_color = \'%s\';
          addthis_brand = \'%s\';
          addthis_options = \'%s\';
          addthis_disable_flash = \'%s\';
      ',
      addslashes(check_plain(variable_get('addthis_username', 'my-username'))),
      addslashes(check_plain(variable_get('addthis_logo', 'http://www.addthis.com/images/yourlogo.png'))),
      addslashes(check_plain(variable_get('addthis_logo_background', 'EFEFFF'))),
      addslashes(check_plain(variable_get('addthis_logo_color', '666699'))),
      addslashes(check_plain(variable_get('addthis_brand', 'Your Site'))),
      addslashes(check_plain(variable_get('addthis_options', 'favorites, email, digg, delicious, myspace, facebook, google, live, more'))),
      variable_get('addthis_options', FALSE) ? 'true' : 'false'
    ), 'inline');
  }
}

/**
 * Theme the AddThis button.
 *
 * @todo Convert to allow this to use an entity or a manual URL and title.
 */
function theme_addthis_button($variables) {
  addthis_button_add_button_style();

  $variables += array(
    'url' => current_path(),
    'title' => drupal_get_title(),
  );

  // If a node object was provided then extract the node URL and title.
  if (!empty($variables['node'])) {
    $node = $variables['node'];
    $uri = entity_uri('node', $node);
    $variables['url'] = url($uri['path'], $uri['options'] + array('absolute' => TRUE));
    $variables['title'] = entity_label('node', $node);
  }

  // If the URL provided is a relative URL, prepend the site's base URL.
  if (!url_is_external($variables['url'])) {
    $variables['url'] = $GLOBALS['base_url'] . '/' . ltrim($variables['url'], '/');
  }

  $image_url = $GLOBALS['is_https'] ? variable_get('addthis_image_secure', 'https://secure.addthis.com/button1-share.gif') : variable_get('addthis_image', 'http://s9.addthis.com/button1-share.gif');
  $image = theme('image', array('path' => $image_url, 'getsize' => FALSE, 'alt' => t('Share')));
  $link_attributes = array('class' => array('addthis-button'));

  $variables['url'] = json_encode($variables['url']);
  $variables['title'] = json_encode($variables['title']);

  if (variable_get('addthis_dropdown_disabled', '0')) {
    $link_attributes['onclick'] = "addthis_url = {$variables['url']}; addthis_title = {$variables['title']}; return addthis_click(this);";
  }
  else {
    $link_attributes['onmouseover'] = "return addthis_open(this, '', {$variables['url']}, {$variables['title']});";
    $link_attributes['onmouseout'] = "return addthis_close();";
    $link_attributes['onclick'] = "return addthis_sendto();";

    $js_url = $GLOBALS['is_https'] ? 'https://secure.addthis.com' : 'http://s7.addthis.com';
    $js_url .= '/js/' . variable_get('addthis_widget_version', '152') . '/addthis_widget.js';
    drupal_add_js($js_url, array('type' => 'external', 'scope' => 'footer'));
  }

  $output = l($image, 'http://www.addthis.com/bookmark.php', array('html' => TRUE, 'attributes' => $link_attributes));

  return $output;
}
