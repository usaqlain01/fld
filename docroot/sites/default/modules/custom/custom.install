<?php

/**
 * Toggle 'Display author and date information.' for all node types.
 */
function custom_update_7000() {
  foreach (node_type_get_names() as $type => $name) {
    variable_set('node_submitted_' . $type, TRUE);
  }
}

/**
 * Enable the menu block export module
 */
function custom_update_7001() {
  module_enable(array('menu_block_export'));
  return 'The Menu block export module has been enabled.';
}

/**
 * Add Topic taxonomy field to all node types except home_page and webform
 */
function custom_update_7002() {
  $field_name = 'field_topic';
  node_types_rebuild();
  $types = node_type_get_types();

  $field = field_info_field($field_name);

  if(!empty($field)) {
    // check each node type
    foreach ($types as $type) {
      if($type->type <> 'home_page' && $type->type <> 'webform') {
        $instance = field_info_instance('node', $field_name, $type->type);
        // skip node types which already have an instance
        if(empty($instance)) {
          $instance = array(
            'field_name' => $field_name,
            'entity_type' => 'node',
            'bundle' => $type->type,
            'label' => t('Topic'),
            'widget_type' => 'options_select',
            'display' => array(
              'default' => array(
                'label' => 'above',
                'type' => 'taxonomy_term_reference_link',
              ),
            ),
            'required' => 1,
            'description' => t('Select one or more topics which the gallery represents. Related content will be displayed based on the topics you specify here in various widgets.'),
          );
          field_create_instance($instance);
        }
      }
    }
  }

  return 'Topic vocabulary has been added to required content types';
}

/**
 * Enable the quicktabs module
 */
function custom_update_7003() {
  module_enable(array('quicktabs'));
  return 'The Quick tabs module has been enabled.';
}

/**
 * Disable core blog module and reclaim 'blog' content type. Enable the new 'customblog' module.
 */
function custom_update_7004() {
  module_disable(array('blog'));
  $blog_disabled = !module_exists('blog');

  $customblog_enabled = module_enable(array('customblog'));

  $blog_claimed = db_query("UPDATE {node_type} SET `base` = 'node_content', `module` = 'node', `custom` = 1, `locked` = 0 WHERE `type` = 'blog'");

  if ($blog_disabled && $customblog_enabled && $blog_claimed) {
    return 'Blog module was disabled and the blog content type now belongs to the core node module. The new customblog module was enabled.';
  }
  else {
    return 'Something messed up. Please make sure that the core blog module is disabled, the new customblog module is enabled, and the blog content type belongs to the core node module.';
  }
}

/**
 * Revoked in custom_update_7007() -- Enable the subpathauto module and deprecate the customblog url aliases.
 */
function custom_update_7005() {
//  module_enable(array('subpathauto'));
//  db_query("DELETE FROM {url_alias} WHERE source LIKE :pattern OR source LIKE :pattern2", array(':pattern' => 'user/%/blog', ':pattern2' => 'blog/%'));
//  return t('The Sub-pathauto module has been enabled.');
}

/**
 * Enable workbench and workbench_moderation modules; add states and transitions for workbench_moderation.
 */
function custom_update_7006() {
  // Enable modules.
  module_enable(array('workbench', 'workbench_moderation'));

  // These are the states we want.
  $states = array(
    array('name' => 'Draft', 'description' => 'Work in progress, not yet ready for publishing.', 'weight' => 0),
    array('name' => 'Review', 'description' => 'Ready for review by content managers.', 'weight' => 1),
    array('name' => 'Approve', 'description' => 'Queued for publishing.', 'weight' => 2),
    array('name' => 'Publish', 'description' => 'Published and visible to the public.', 'weight' => 3),
    array('name' => 'Remove', 'description' => 'Removed from the site or approval queue.', 'weight' => 4),
  );

  foreach ($states as $s) {
    // Update/insert states.
    db_merge('workbench_moderation_states')
      ->key(array('name' => $s['name']))
      ->fields($s)
      ->execute();

    // Update/insert transitions.
    foreach ($states as $to) {
      if ($s['name'] == $to['name']) { continue; }
      $transition = array(
        'from_name' => $s['name'],
        'to_name' => $to['name'],
        'ntype' => 'all',
      );
      db_merge('workbench_moderation_transitions')
        ->key($transition)
        ->fields($transition)
        ->execute();
    }
  }

  return 'Enabled workbench and workbench_moderation. Configured default states and transitions for workbench_moderation.';
}

/**
 * Disable the subpathauto module.
 */
function custom_update_7007() {
  module_disable(array('subpathauto'));
  return 'The Sub-pathauto module has been disabled.';
}

/**
 * Enable the workbench_media module.
 */
function custom_update_7008() {
  $success = module_enable(array('workbench_media'));
  if ($success) {
    return 'The Workbench Media module has been enabled.';
  }
  else {
    return 'The Workbench Media module couldn\'t be enabled.';
  }
}

/**
 * Enable user picture functionality.
 */
function custom_update_7009() {
  variable_set('user_pictures', 1);
  variable_set('user_picture_default', 'public://pictures/profile-default.png');
  variable_set('user_picture_style', 'thumbnail');
  module_disable(array('imagecache_profiles'));
  variable_set('user_picture_style_profiles', 'profile');
  return 'User picture functionality enabled.';
}

/**
 * Enable moderation on Articles and configure permissions.
 */
function custom_update_7010() {
  // Enable moderation on the 'article' node type.
  $node_options = array_unique(array_merge(variable_get('node_options_article', array()), array('revisions', 'moderation')));
  variable_set('node_options_article', $node_options);
  variable_set('workbench_moderation_default_state_article', 'Draft');

  // Grant moderation permissions to authors, reviewers, and publishers.
  $grant_permissions = array(
    'author' => array(
      'moderate article state from Draft to Review' => TRUE,
    ),
    'reviewer' => array(
      'moderate article state from Draft to Review' => TRUE,
      'moderate article state from Draft to Approve' => TRUE,
      'moderate article state from Review to Draft' => TRUE,
      'moderate article state from Review to Approve' => TRUE,
      'moderate article state from Approve to Review' => TRUE,
      'moderate article state from Approve to Draft' => TRUE,
    ),
    'publisher' => array(
      'moderate article state from Approve to Publish' => TRUE,
    ),
  );
  foreach ($grant_permissions as $role_name => $permissions) {
    if ($role = user_role_load_by_name($role_name)) {
      user_role_change_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Grant authors permission to edit media they have uploaded.
 *
 * @see http://drupal.org/node/992978
 */
function custom_update_7011() {
  if ($role = user_role_load_by_name('author')) {
    user_role_grant_permissions($role->rid, array('edit own media'));
  }
}

/**
 * Enable the block_visibility_or module.
 */
function custom_update_7012() {
  module_enable(array('block_visibility_or'));
  return 'The Block visibility OR module has been enabled.';
}

/**
 * Remove view block that with old hash tag
 */
function custom_update_7013() {
  db_delete('block')
  ->condition('delta', '7995d8aa05029e161955eb29217c1674')
  ->execute();

  return 'Removed block view that had delta of 7995d8aa05029e161955eb29217c1674 and was no longer in use.';
}

/**
 * Functionality was moved from custom.module into an independent module: enable the new feed_fields module.
 */
function custom_update_7014() {
  module_enable(array('feed_fields'));
  return 'The Views Feed Fields module has been enabled.';
}

/**
 * Enable the field_formatter_settings module.
 */
function custom_update_7015() {
  module_enable(array('field_formatter_settings'));
  return 'The Field Formatter Settings module has been enabled.';
}

/**
 * Enable the invisimail module.
 */
function custom_update_7016() {
  module_enable(array('invisimail'));
  return 'The Invisimail module has been enabled.';
}

/**
 * Enable the sidebar left 2nd level menu in exhibit content type nodes.
 */
function custom_update_7017() {
  if (!db_query("SELECT 1 FROM {menu_position_rules} WHERE admin_title = :admintitle", array(':admintitle' => 'Exhibits'))->fetchField()) {
    $rule = array(
      'admin_title' => 'Exhibits',
      'enabled' => 1,
      'conditions' => serialize(array('content_type' => array('content_type' => array('exhibit' => 'exhibit')))),
      'menu_name' => 'main-menu',
      'plid' => 2656,
      'mlid' => '4905',
      'weight' => 0,
    );
    db_insert('menu_position_rules')
      ->fields($rule)
      ->execute();
  }
  return "Enabled menu in the left sidebar when on exhibit content type nodes.";
}

/**
 * Enable the Views bulk operations module.
 */
function custom_update_7018() {
  module_enable(array('views_bulk_operations'));
  return 'The Views bulk operations module has been enabled.';
}

/**
 * Make department hierarchy and navigation changes.
 */
function custom_update_7019() {

  $tab_labels = array('Home', 'Research', 'Collections', 'People', 'History', 'Policies');
  $department_paths = array(
    'anthropology',
    'botany',
    'ecco',
    'geology',
    'library',
    'pritzkerlab',
    'zoology');
  $regex = "/^explore\/department\/[" . implode('|', $department_paths) .
          "]*\/.*/";
  // these regexes could be combined, but i'm short on time and this works
  $regex_home = "/^explore\/department\/[" . implode('|', $department_paths) .
          "]*$/U";
  $main_menu = menu_load_links('main-menu');

  // new department menus
  foreach($department_paths as $department_path) {
    $menu = array();
    $menus = menu_get_names();
    $menu_name = $department_path . '-tabs';

    if(!in_array($menu_name, $menus)) {
      $menu['menu_name'] = $menu_name;
      $menu['title'] = ucwords($department_path) . t(' Tabs');
      $menu['description'] = t('Tertiary navigation for Departments');
      menu_save($menu);
    }
  }

  // move tertiary dept navigation (but not divisions)
  foreach($main_menu as $x => $menu_item) {
    foreach($tab_labels as $label) {
      if($menu_item['link_title'] == $label) {
        $alias = drupal_get_path_alias($menu_item['link_path']);
        $item = array();
        if(preg_match($regex, $alias) || preg_match($regex_home, $alias)
           || ($alias == 'content/botany-research')) {

          //menu_link_delete($menu_item['mlid']);
          foreach($department_paths as $department_path) {
            if(strstr($alias, $department_path)) {
              $menu_item['menu_name'] = $department_path . '-tabs';
              $menu_item['plid'] = 0;
              break;
            }
          }
          $mlid = menu_link_save($menu_item);
        }
      }
    }
  }

  // some additional menu item changes
  menu_link_delete(3681); // remove the ecco link under Conservation Efforts
  return 'Department menus updated.  Please manually add Position rules and delete blocks:  ECCo Content Menu and Geology Content Menu';
}

/**
 * Add a link field to Media image.
 */
function custom_update_7020() {
  $field = array(
    'field_name' => 'field_more_info_link',
    'type' => 'link_field',
    'translatable' => TRUE,
    'settings' => array(
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => '80',
      ),
      'attributes' => array(
        'target' => 'default',
        'rel' => '',
        'class' => '',
      ),
      'target' => 'default',
      'class' => '',
      'rel' => '',
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_more_info_link',
    'entity_type' => 'media',
    'bundle' => 'image',
    'label' => 'More Information',
    'widget' => array(
      'weight' => '4',
      'type' => 'link_field',
      'module' => 'link',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => false,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'default',
        'weight' => '11',
        'settings' => array(
          'custom_collapsible' => 0,
          'custom_collapsible_collapsed' => 0,
        ),
        'module' => 'link',
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => array(
      0 => array(
        'title' => 'More information',
        'url' => '',
      ),
    ),
  );
  field_create_instance($instance);

  return 'More Info Link added to media:image.';
}

/*
 * Configure new workbench_moderation permissions (from workbench commit 43b53eea).
 */
function custom_update_7021() {
  // Grant moderation permissions to authors, reviewers, and publishers.
  $grant_permissions = array(
    'author' => array(
      'moderate content from Draft to Review' => TRUE,
    ),
    'reviewer' => array(
      'moderate content from Draft to Review' => TRUE,
      'moderate content from Draft to Approve' => TRUE,
      'moderate content from Review to Draft' => TRUE,
      'moderate content from Review to Approve' => TRUE,
      'moderate content from Approve to Review' => TRUE,
      'moderate content from Approve to Draft' => TRUE,
    ),
    'publisher' => array(
      'moderate content from Approve to Publish' => TRUE,
    ),
  );
  foreach ($grant_permissions as $role_name => $permissions) {
    if ($role = user_role_load_by_name($role_name)) {
      user_role_change_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Enable the Pathauto persistant state module.
 */
function custom_update_7022() {
  module_enable(array('pathauto_persist'));
  return 'The Pathauto persistant state module has been enabled.';
}

/**
 * Reverting views in the database that match exported views in code
 */
function custom_update_7023() {
  return custom_revert_views();
}

/**
 * Uninstall CCK module!
 */
function custom_update_7024() {
  module_disable(array('cck'));
  drupal_uninstall_modules(array('cck'));
}

/**
 * Enable revisions for all content types except for home_page.
 */
function custom_update_7025() {
  $node_types = node_type_get_names();
  foreach (array_keys($node_types) as $node_type) {
    $options = variable_get('node_options_' . $node_type, array());
    $index = array_search('revisions', $options);
    if ($node_type == 'home_page') {
      if ($index !== FALSE) {
        unset($options[$index]);
      }
    }
    elseif ($index === FALSE) {
      $options[] = 'revisions';
    }
    variable_set('node_options_' . $node_type, $options);
  }
}

/**
 * Disable the block_export module.
 */
function custom_update_7026() {
  module_disable(array('block_export'));
  drupal_uninstall_modules(array('block_export'));
}

/**
 * Add a new image style for microsite widgets.
 */
function custom_update_7027() {
  // Style and effect configuration arrays. This will fail if a 'microsite_widget'
  $style = array (
    'name' => 'microsite-widgets',
  );
  $effects = array (
    array (
      'module' => 'image',
      'name' => 'image_scale_and_crop',
      'data' => array (
        'width' => 230,
        'height' => 141,
        'upscale' => 0,
      ),
    ),
  );

  // image_style_save() fails if the style name matches an existing style's name and the isid is
  // not present; load and delete any existing style of this name.
  if ($old = image_style_load($style['name'])) {
    image_style_delete($old);
  }

  // Save the image style.
  image_style_save($style);

  // Load the image style id and save effects.
  $style = image_style_load($style['name']);
  foreach ($effects as &$effect) {
    $effect['isid'] = $style['isid'];
    image_effect_save($effect);
  }

  // Get bundle settings and enable custom display settings for the new view mode (new image styles
  // yield new view modes, as far as Media module is concerned).
  $bundle_settings = field_bundle_settings('media', 'image');
  $bundle_settings['view_modes']['custom_microsite-widgets']['custom_settings'] = TRUE;
  field_bundle_settings('media', 'image', $bundle_settings);

  // Get the fields on the 'image' bundle.
  $field_instances = field_info_instances('media', 'image');

  // Display Media's file field for our new view mode to use our new image style.
  $instance = $field_instances['file'];
  $instance['display']['custom_microsite-widgets']['label'] = 'hidden';
  $instance['display']['custom_microsite-widgets']['type'] = 'styles_file_microsite-widgets';
  $instance['display']['custom_microsite-widgets']['module'] = 'styles';
  field_update_instance($instance);
  unset($field_instances['file']);

  // Hide all the other fields from our new view mode.
  foreach ($field_instances as $instance) {
    $instance['display']['custom_microsite-widgets']['label'] = 'hidden';
    $instance['display']['custom_microsite-widgets']['type'] = 'hidden';
    field_update_instance($instance);
  }
}

/**
 * Add a link field to Media image.
 */
function custom_update_7028() {
  $field = array(
    'field_name' => 'field_homepage_image_link',
    'type' => 'link_field',
    'translatable' => TRUE,
    'settings' => array(
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => '80',
      ),
      'attributes' => array(
        'target' => 'default',
        'rel' => '',
        'class' => '',
      ),
      'target' => 'default',
      'class' => '',
      'rel' => '',
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_homepage_image_link',
    'entity_type' => 'media',
    'bundle' => 'image',
    'label' => 'Homepage Image Link',
    'widget' => array(
      'weight' => '4',
      'type' => 'link_field',
      'module' => 'link',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => false,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'default',
        'weight' => '11',
        'settings' => array(
          'custom_collapsible' => 0,
          'custom_collapsible_collapsed' => 0,
        ),
        'module' => 'link',
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => array(
      0 => array(
        'title' => '',
        'url' => '',
      ),
    ),
  );
  field_create_instance($instance);

  return 'Homepage Image Link added to media:image.';
}

/**
 * Make sure that revisions are enabled for all node types where moderation is enabled.
 */
function custom_update_7029() {
  $types = node_type_get_types();
  foreach (array_keys($types) as $type) {
    $options = variable_get('node_options_' . $type, array());
    if (in_array('moderation', $options)) {
      $options[] = 'revisions';
      $options = array_unique($options);
      variable_set('node_options_' . $type, $options);
    }
  }
}

/**
 * Make sure that revisions are enabled for all node types where moderation is enabled. Update 7029
 * used the wrong settings name.
 */
function custom_update_7030() {
  $types = node_type_get_types();
  foreach (array_keys($types) as $type) {
    $options = variable_get('node_options_' . $type, array());
    if (in_array('moderation', $options)) {
      // Make sure 'revision' IS in the array.
      $options[] = 'revision';
      // Make sure 'revisions' is NOT in the array.
      $options = array_diff($options, array('revisions'));
      // Make sure each option only appears once.
      $options = array_unique($options);
      // Save the node type options.
      variable_set('node_options_' . $type, $options);
    }
  }
}

/**
 * Remove the old field group module tables.
 */
function custom_update_7031() {
  db_drop_table('field_group');
  db_drop_table('field_group_fields');
  module_enable(array('field_group'));
  return 'The Field group module has been enabled.';
}

/**
 * Enable the flood control module.
 */
function custom_update_7032() {
  module_enable(array('flood_control'));
  return 'The Flood control module has been enabled. You can set the flood limit variables at admin/config/system/flood-control.';
}

/**
 * Grant the new "view all unpublished content" permission (from Workbench) to the reviewer and
 * publisher roles.
 */
function custom_update_7033() {
  $grant_permissions = array(
    'reviewer' => array(
      'view all unpublished content' => TRUE,
    ),
    'publisher' => array(
      'view all unpublished content' => TRUE,
    ),
  );
  foreach ($grant_permissions as $role_name => $permissions) {
    if ($role = user_role_load_by_name($role_name)) {
      user_role_change_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Remove cruft from block tables.
 */
function custom_update_7034() {
  foreach (module_implements('block_info') as $module) {
    if (in_array($module, array('apachesolr_search'))) {
      // Skip certain modules.
      continue;
    }
    $blocks = module_invoke($module, 'block_info');
    if (!empty($blocks)) {
      db_delete('block')
        ->condition('module', $module)
        ->condition('delta', array_keys($blocks), 'NOT IN')
        ->execute();
      db_delete('block_node_type')
        ->condition('module', $module)
        ->condition('delta', array_keys($blocks), 'NOT IN')
        ->execute();
    }
  }
}

/**
 * Remove table cruft for aggregator, admin_menu, and cck modules.
 */
function custom_update_7035() {
  $modules = array('aggregator', 'admin_menu', 'cck');
  foreach ($modules as $module) {
    drupal_set_installed_schema_version($module, SCHEMA_INSTALLED);
  }
  drupal_uninstall_modules($modules);
}

/**
 * Create custom blocks instead of providing them via hook_block_info() and hook_block_view(), so
 * that Field admins can edit the text.
 */
function custom_update_7036() {
  // Default theme for our blocks.
  $theme = variable_get('theme_default', 'sitetheme');

  // Block info, originally in our hook_block_info() implementation.
  $info['contact_help'] = array(
    'info' => t('Contact help'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -66,
    'status' => 1,
    'region' => 'content',
    'visibility' => 1,
    'pages' => 'contact',
    'title' => 'Contact help',
    'content' => '<p>Contact help text goes here.<br/><span title="This field is required." class="form-required">*=required</span></p>',
    'format' => '3',
    'a11y_title' => 'invisible',
  );
  $info['contact_us'] = array(
    'info' => t('Contact us'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -58,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => 1,
    'pages' => 'contact',
    'title' => 'Contact us',
    'content' => '<h3>Email Us</h3><p>Membership:<br/><a href="mailto:membership@fieldmuseum.org">membership@fieldmuseum.org</a></p><p>Press Room:<br/><a href="mailto:media@fieldmuseum.org">media@fieldmuseum.org</a></p><p>Special Events:<br/><a href="mailto:events@fieldmuseum.org">events@fieldmuseum.org</a></p><h3>Call Us</h3><p><strong>General Info:</strong> 312-922-9410<br/><strong>Membership:</strong> 312-665-7700<br/><strong>Press Room:</strong> 312-665-7100<br/><strong>School Programs:</strong> 312-922-7500<br/><strong>Special Events:</strong> 312-665-7600<br/></p><h3>Mail us</h3><p><strong>The Field Museum</strong><br />1400 S. Lake Shore Dr.<br />Chicago, IL 60650-2496<br /><a href="/visit/getting-hereparking">Directions / Getting here</a></p><h3>Hours</h3><p><br />9 a.m. - 5 p.m.<br />Last admission at 4 p.m.<br />Open every day except Christmas</p>',
    'format' => '3',
  );
  $info['specific_interests'] = array(
    'info' => t('Specific interests'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -21,
    'status' => 1,
    'region' => 'content',
    'visibility' => 1,
    'pages' => 'contact',
    'title' => 'Specific interests',
    'content' => '<table style="width: 100%;" align="left" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><strong>Annual Fund</strong> - 312-665-7777, annualfund@fieldmuseum.org</td><td><strong>Anthropology</strong> - anthropology@fieldmuseum.org</td></tr><tr><td><strong>Founders Council</strong> - 312-665-7773, annnualfund@fieldmuseum.org</td><td><strong>Botany</strong> - botany@fieldmuseum.org</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table>',
    'format' => '3',
  );
  $info['get_directions'] = array(
    'info' => t('Get directions'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -21,
    'status' => 1,
    'region' => 'content',
    'visibility' => 1,
    'pages' => implode("\n", array('visit/*')),
    'title' => 'Get directions',
    'content' => '<script src="http://www.gmodules.com/ig/ifr?url=http://hosting.gmodules.com/ig/gadgets/file/114281111391296844949/driving-directions.xml&amp;up_fromLocation=&amp;up_myLocations=The%20Field%20Museum%2C%201400%20S.%20Lake%20Shore%20Dr%2C%20Chicago%2C%20IL%2060605-2496&amp;up_defaultDirectionsType=&amp;synd=open&amp;w=190&amp;h=NaN&amp;title=&amp;brand=light&amp;lang=en&amp;country=US&amp;output=js"></script>',
    'format' => FALSE,
  );
  $info['plan_your_visit'] = array(
    'info' => t('Plan your visit - (WR-06)'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -57,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => 1,
    'pages' => implode("\n", array(
			'<front>',
      'content/map',
      '*/lists/*',
      'happening/exhibits',
      'happening/exhibits/browse',
      'happening/exhibits/browse/*',
    )),
    'title' => 'Plan your visit',
    'content' => '<h3>Hours</h3><p>Open every day except Christmas. 9am - 5pm</p><h3>Location</h3><p>1400 S Lake Shore Drive Chicago, IL 60605</p><p><a class="view-map" href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;q=field+museum&amp;sll=39.53794,-91.669922&amp;sspn=3.435408,5.119629&amp;ie=UTF8&amp;rq=1&amp;ev=zi&amp;split=1&amp;hq=field+museum&amp;hnear=&amp;ll=41.871318,-87.616224&amp;spn=0.025118,0.039997&amp;z=15&amp;iwloc=B" target="_blank">View Map</a><br />
<a href="/visit">Plan your Visit</a></p>',
    'format' => '3',
    'node_types' => array(
      'article',
      'exhibit',
      'home_page',
    ),
  );
  $info['other_ways_to_get_in_touch'] = array(
    'info' => t('Other ways to get in touch'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -56,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => 1,
    'pages' => 'content',
    'title' => 'Other ways to get in touch',
    'content' => '<p><strong>Email us</strong>:<br />Group Sales: groupsales@fieldmuseum.org<br />Membership: membership@fieldmuseum.org<br />Press Room: media@fieldmuseum.org<br />Special Events: events@fieldmuseum.org</p><p><strong>Call us</strong>:<br /><strong>General info</strong>: 312-922-9410<br /><strong>Group Sales</strong>: 312-665-7300<br /><strong>Membership</strong>: 312-665-7700<br /><strong>Press Room</strong>: 312-665-7100</p>',
    'format' => '3',
  );

  $info['email_signup'] = array(
    'info' => t('Signup/Email Collection Block (WP-04)'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -21,
    'status' => 1,
    'region' => 'content',
    'visibility' => 1,
    'pages' => implode("\n", array('about','education','support')),
    'title' => 'Email signup',
    'content' => '<p>Lorem ipsum dolor sit amet...</p><form id="EmailSignup" action="http://fmnh.convio.net/site/QuickReg?QREG_STYLE=0&amp;QREG_INCLUDE_INTERESTS=TRUE&amp;QREG_EXTERNAL_CONTENT=%20FALSE&amp;QREG_BUTTON_TEXT=REGISTER&amp;QREG_COMPLETE=NONE&amp;TS=1279054234703&amp;NEXTURL=HTTP://WWW.FIELDMUSEUM.ORG" method="get" name="EmailSignup" target="_blank"><div class="form-inner"><div class="form-inner-inner"><label for="email">Email Address</label><input class="form-text" id="email" name="QREG_EMAIL" type="email" /></div></div><input class="image-submit" height="11" name="submit" src="/sites/default/themes/sitetheme/images/button-submit.png" type="image" width="56" /></form>',
    'format' => FALSE,
    'node_types' => array('section_front'),
  );
  $info['copyright'] = array(
    'info' => t('Copyright and location'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => 1,
    'status' => 1,
    'region' => 'footer',
    'visibility' => 1,
    'pages' => '*',
    'title' => 'Copyright and location',
    'content' => '©2010 The Field Museum, All Rights Reserved.<br/>1400 S. Lake Shore Drive, Chicago, IL 60650-2496<br/>312.922.9410',
    'format' => FALSE,
  );
  $info['flickr_badge'] = array(
    'info' => t('flickr badge'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -55,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => 1,
    'pages' => '<front>',
    'title' => 'flickr',
    'content' => '<style type="text/css">
.flickr_badge_image {margin:0px;display:inline;}
.flickr_badge_image img {border: 1px solid #DDDDDD !important; padding:5px; margin:4px;}
#flickr_badge_wrapper {width:192px;text-align:left}</style>
<div id="flickr_badge_wrapper"><script type="text/javascript" src="http://www.flickr.com/badge_code_v2.gne?count=6&display=random&size=s&layout=x&source=group&group=638751@N21"></script><center><small><a href="http://www.flickr.com/groups/fieldmuseum/">Browse more Field Museum photos</a></small></center></div>',
		'format'=>'3',
  );

  // Save each block to the database.
  foreach ($info as $block) {
    // Save the custom block content.
    $block_custom = (object) array(
      'body' => $block['content'],
      'info' => $block['info'],
      'format' => $block['format'],
    );
    drupal_write_record('block_custom', $block_custom);

    // Save the block configuration.
    $block_info = (object) array(
      'module' => 'block',
      'delta' => $block_custom->bid,
      'theme' => $theme,
      'status' => $block['status'],
      'weight' => $block['weight'],
      'region' => $block['region'],
      'custom' => 0,
      'visibility' => $block['visibility'],
      'pages' => $block['pages'],
      'title' => $block['title'],
      'cache' => $block['cache'],
    );
    drupal_write_record('block', $block_info);

    // Configure per-node-type block visibility.
    if (isset($block['node_types'])) {
      foreach ($block['node_types'] as $node_type) {
        $config = array(
          'module' => $block_info->module,
          'delta' => $block_info->delta,
          'type' => $node_type,
        );
        db_insert('block_node_type')
          ->fields($config)
          ->execute();
      }
    }
  }

  // Remove old block records.
  db_delete('block')
    ->condition('module', 'custom')
    ->execute();
  db_delete('block_node_type')
    ->condition('module', 'custom')
    ->execute();
}
