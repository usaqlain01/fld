<?php
// $Id$

/**
 * @file
 * Install file for the workbench moderation module.
 *
 * @copyright (C) Copyright 2010 Palantir.net
 */

/**
 * Implements hook_install().
 */
function workbench_moderation_install() {
  // Create tables.
  _workbench_moderation_insert_values();
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'workbench_moderation')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function workbench_moderation_schema() {
  $schema['workbench_moderation_states'] = array(
    'description' => 'Defines all possible states',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A description of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Sort weight for the moderation state.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
    ),
    'unique keys' => array('name' => array('name'))
  );

  $schema['workbench_moderation_node_history'] = array(
    'fields' => array(
      'hid' => array(
        'description' => 'Node history entry key.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vid' => array(
        'description' => 'Node version id. Foreign key to {node_revision}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'nid' => array(
        'description' => 'Node id. Foreign key to {node}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'from_state' => array(
        'description' => 'The old moderation state of the node',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'state' => array(
        'description' => 'The current moderation state of the node.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The user id of the moderator who made the change. Foreign key to {users}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'stamp' => array(
        'description' => 'The timestamp of the change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'published' => array(
        'description' => 'Indicated the live version of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'current' => array(
        'description' => 'Indicated the current version of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid'),
      'vid' => array('vid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node_revision' => 'vid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['workbench_moderation_transitions'] = array(
    'description' => 'Defines the valid transitions for states',
    'fields' => array(
      'from_name' => array(
        'description' => 'The starting moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'to_name' => array(
        'description' => 'The ending moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'ntype' => array(
        'description' => 'Node types to apply to. Currently not used.',
        'type' => 'varchar',
        'length' => '40',
        'default' => 'all',
      ),
    ),
  );

  return $schema;
}


/**
 * Adds default data for workflow states
 */
function _workbench_moderation_insert_values() {
  $states[] = array('name' => workbench_moderation_state_none());
  $states[] = array('name' => 'Review');
  $states[] = array('name' => workbench_moderation_state_published());
  $weight = 0;
  foreach ($states as $state) {
    db_insert('workbench_moderation_states')
      ->fields(array(
          'name' => $state,
          'description' => $state,
          'weight' => $weight++,
      ))
      ->execute();
  }

  // Transitions.
  $transitions[] = array(workbench_moderation_state_none(), 'Review');
  $transitions[] = array('Review', workbench_moderation_state_published());
  $transitions[] = array(workbench_moderation_state_published(), 'Review');
  foreach ($transitions as $transition) {
    db_insert('workbench_moderation_transitions')
      ->fields(array(
          'from_name' => $transition[0],
          'to_name' => $transition[1],
      ))
      ->execute();
  }
}
