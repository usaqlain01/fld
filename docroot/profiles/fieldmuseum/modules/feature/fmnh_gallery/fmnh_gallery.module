<?php
/**
 * @file
 * Code for the Field Museum gallery feature.
 */

include_once 'fmnh_gallery.features.inc';

/**
 * @param $variables
 * @param $hook
 */
function fmnh_gallery_preprocess_node(&$variables, $hook) {
  $node = $variables['node'];
  if ($node->type == 'media_gallery') {
    if ($variables['view_mode'] == 'promo') {
      $first_image = $variables['content']['media_gallery_file'][0];
      $deltas = element_children($variables['content']['media_gallery_file']);
      $variables['content']['media_gallery_file'] = array_diff_key($variables['content']['media_gallery_file'], array_combine($deltas, $deltas));
      $variables['content']['media_gallery_file'][0] = $first_image;
    }
  }
}

/**
 * Implement hook_theme().
 */
function fmnh_gallery_theme($existing, $type, $theme, $path) {
  return array(
    'field__media_gallery_file__media_gallery' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function specifically for the gallery images.
 *
 * @param $variables
 * @return string
 * @see theme_field
 */
function theme_field__media_gallery_file__media_gallery(&$variables) {
  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';
  }

  // Render the items.
  $output .= '<div class="field-items"' . $variables['content_attributes'] . '>';
  foreach ($variables['items'] as $delta => $item) {
    $classes = 'field-item ' . ($delta % 2 ? 'odd' : 'even');
    $output .= '<div class="' . $classes . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</div>';
  }
  $output .= '</div>';

  // Render the top-level DIV.
  $output = '<div class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</div>';

  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param $theme_registry
 */
function fmnh_gallery_theme_registry_alter(&$theme_registry) {
  // Move the media gallery preprocess function after RDF module's.
  $theme_registry['field']['preprocess functions'] = array_diff($theme_registry['field']['preprocess functions'], array('media_gallery_preprocess_field'));
  $theme_registry['field']['preprocess functions'][] = 'media_gallery_preprocess_field';

  // Copy the default field theme functions to the specific override.
  $theme_registry['field__media_gallery_file__media_gallery']['preprocess functions'] = $theme_registry['field']['preprocess functions'];
  $theme_registry['field__media_gallery_file__media_gallery']['process functions'] = $theme_registry['field']['process functions'];
}

/**
 * Allowed values callback to disable lightbox.
 *
 * @return array
 */
function _fmnh_gallery_get_format_values() {
  return array_diff_key(_media_gallery_get_format_values(), array('lightbox' => ''));
}

/**
 * Implements hook_entity_load().
 *
 * @param $entities
 * @param $type
 */
function fmnh_gallery_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as $id => $entity) {
      list(,,$bundle) = entity_extract_ids($type, $entity);
      if ($bundle == 'media_gallery') {
        $entity->media_gallery_columns['und'][0]['value'] = '6';
        $entity->media_gallery_rows['und'][0]['value'] = pow(2, 29);
      }
    }
  }
}

/**
 * Disable access to all the media gallery fields.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function fmnh_gallery_form_media_gallery_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#pre_render'][] = 'fmnh_gallery_form_pre_render';
  $form['media_gallery_allow_download']['#access'] = FALSE;
  $form['media_gallery_block_columns']['#access'] = FALSE;
  $form['media_gallery_block_rows']['#access'] = FALSE;
  $form['media_gallery_columns']['#access'] = FALSE;
  $form['media_gallery_expose_block']['#access'] = FALSE;
  $form['media_gallery_format']['#access'] = FALSE;
  $form['media_gallery_image_info_where']['#access'] = FALSE;
  $form['media_gallery_lightbox_extras']['#access'] = FALSE;
  $form['media_gallery_rows']['#access'] = FALSE;
}

/**
 * Hide useless settings.
 *
 * @param $element
 * @return mixed
 */
function fmnh_gallery_form_pre_render($element) {
  hide($element['settings_wrapper']);
  hide($element['block']);
  return $element;
}

/**
 * Implements hook_admin_paths().
 */
function fmnh_gallery_admin_paths() {
  $paths = array(
    'node/*/sort' => TRUE,
  );
  return $paths;
}

/**
 * Add the imagecrop button on multiedit forms for media galleries.
 */
function fmnh_gallery_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'media_edit_') === 0) {
    imagecrop_form_file_entity_edit_alter($form, $form_state);
    $form['imagecrop'] = $form['actions']['imagecrop'];
  }
}
